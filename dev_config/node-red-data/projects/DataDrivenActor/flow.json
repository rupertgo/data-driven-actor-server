[
    {
        "id": "52bac4d7.a2850c",
        "type": "tab",
        "label": "CIVIC DIGITS",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a7ea88cc.f7f7b8",
        "type": "tab",
        "label": "Shutdown Pi",
        "disabled": false,
        "info": ""
    },
    {
        "id": "87f571d4.cae27",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b8f3d9a3.ae6498",
        "type": "tab",
        "label": "Flow 2",
        "disabled": true,
        "info": ""
    },
    {
        "id": "3c645eec.a8fd02",
        "type": "tab",
        "label": "Basic Test",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f67c8ceba9af8893",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e2e29080.3c168",
        "type": "subflow",
        "name": "Input Listen",
        "in": [],
        "out": [
            {
                "x": 1026.9999389648438,
                "y": 191,
                "wires": [
                    {
                        "id": "b63c66e5.9bb7a8",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "65571491.55038c",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [],
        "out": []
    },
    {
        "id": "a7930a9b.9e77d8",
        "type": "subflow",
        "name": "Face Tracker Input",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 380,
                "y": 80,
                "wires": [
                    {
                        "id": "ac61577b.ea3be8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "2843e038da0bd592",
        "type": "subflow",
        "name": "Face1 Polling Setup",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 380,
                "y": 80,
                "wires": [
                    {
                        "id": "ca5ea4d249ff28a1",
                        "port": 0
                    },
                    {
                        "id": "c23f68dfbf75b22f",
                        "port": 0
                    },
                    {
                        "id": "d06c0c9eb30ff651",
                        "port": 0
                    },
                    {
                        "id": "69436e860101e84d",
                        "port": 0
                    },
                    {
                        "id": "05c2ed66251ee2b1",
                        "port": 0
                    },
                    {
                        "id": "f67f4da82ffee6bc",
                        "port": 0
                    },
                    {
                        "id": "a8a91c9bdb794c7c",
                        "port": 0
                    },
                    {
                        "id": "7dfea91bbdd61cb5",
                        "port": 0
                    },
                    {
                        "id": "1793283ab19432c8",
                        "port": 0
                    },
                    {
                        "id": "531885672c572c48",
                        "port": 0
                    },
                    {
                        "id": "e041e488a2b0a4d2",
                        "port": 0
                    }
                ]
            },
            {
                "x": 360,
                "y": 640,
                "wires": [
                    {
                        "id": "7dfea91bbdd61cb5",
                        "port": 0
                    }
                ]
            },
            {
                "x": 980,
                "y": 60,
                "wires": [
                    {
                        "id": "09444b08fb7821d6",
                        "port": 0
                    },
                    {
                        "id": "976612393ce062e4",
                        "port": 0
                    },
                    {
                        "id": "f39a8a099011ccb6",
                        "port": 0
                    },
                    {
                        "id": "df9461e7aef7b1d8",
                        "port": 0
                    },
                    {
                        "id": "d76c16fbbda57862",
                        "port": 0
                    },
                    {
                        "id": "65b608442d774244",
                        "port": 0
                    },
                    {
                        "id": "3333e6f41e88f30b",
                        "port": 0
                    },
                    {
                        "id": "4da9a644719bd807",
                        "port": 0
                    },
                    {
                        "id": "b38be7c9cce01c2f",
                        "port": 0
                    },
                    {
                        "id": "a6279416d770feb6",
                        "port": 0
                    }
                ]
            },
            {
                "x": 980,
                "y": 460,
                "wires": [
                    {
                        "id": "5bb4e2a3b4e39f74",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "fb9e17ab.ff3d08",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "bc95cc0b.71d6b",
        "type": "websocket-listener",
        "path": "/ws/input",
        "wholemsg": "false"
    },
    {
        "id": "e08a0933.2e5a8",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9cc592dd.1d7198",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "High Contrast",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#4B7930",
                    "value": "#4B7930",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#000000",
                    "edited": true
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#232323",
                    "edited": true
                },
                "group-textColor": {
                    "value": "#ebebeb",
                    "edited": true
                },
                "group-borderColor": {
                    "value": "#232323",
                    "edited": true
                },
                "group-backgroundColor": {
                    "value": "#232323",
                    "edited": true
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#000000",
                    "edited": true
                },
                "widget-borderColor": {
                    "value": "#232323",
                    "edited": true
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Emotion Control Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 60,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "ce2d38b7.02b4f",
        "type": "ui_group",
        "name": "Face 1",
        "tab": "1c939e85.3b5999",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "adf63440.211c7",
        "type": "ui_tab",
        "name": "Emotion Control",
        "icon": "mood",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3d9c3b97.79ae84",
        "type": "ui_group",
        "name": "Face 1",
        "tab": "adf63440.211c7",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "a6405cb3.31a948",
        "type": "ui_tab",
        "name": "Emotion Setup",
        "icon": "sentiment_neutral",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e7ea26e6.3e9db",
        "type": "ui_group",
        "name": "Face 1 VizBlock Settings",
        "tab": "a6405cb3.31a948",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "f5ab0f8b.b4488",
        "type": "ui_spacer",
        "z": "52bac4d7.a2850c",
        "name": "spacer",
        "group": "e7ea26e6.3e9db",
        "order": 12,
        "width": "5",
        "height": "1"
    },
    {
        "id": "66b9f933.60ec4",
        "type": "ui_spacer",
        "z": "52bac4d7.a2850c",
        "name": "spacer",
        "group": "e7ea26e6.3e9db",
        "order": 19,
        "width": "1",
        "height": "2",
        "className": ""
    },
    {
        "id": "1ac8c3d4.851a0c",
        "type": "ui_spacer",
        "z": "52bac4d7.a2850c",
        "name": "spacer",
        "group": "e7ea26e6.3e9db",
        "order": 4,
        "width": "1",
        "height": "2",
        "className": ""
    },
    {
        "id": "84849469.5df438",
        "type": "ui_group",
        "name": "Vizblock Commands",
        "tab": "a6405cb3.31a948",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "8474ae2b.040b28",
        "type": "ui_spacer",
        "z": "52bac4d7.a2850c",
        "name": "spacer",
        "group": "e7ea26e6.3e9db",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "bd04129c.d87dd",
        "type": "ui_tab",
        "name": "Poll Controller",
        "icon": "content_paste",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a9c20ea.6cdaff",
        "type": "ui_tab",
        "name": "Voting",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "98582f48.ad9928",
        "type": "ui_group",
        "name": "Face 1 Poll Setup",
        "tab": "bd04129c.d87dd",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "fae06d00.7ce458",
        "type": "ui_group",
        "name": "Vote",
        "tab": "a9c20ea.6cdaff",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ca2272c3.e8396",
        "type": "ui_group",
        "name": "Links",
        "tab": "d9bf7560.df5e58",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d9bf7560.df5e58",
        "type": "ui_tab",
        "name": "External Apps",
        "icon": "phone_iphone",
        "order": 5,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "1c939e85.3b5999",
        "type": "ui_tab",
        "name": "Face Control",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "96bb7209.4bc5c",
        "type": "ui_group",
        "name": "Face 1",
        "tab": "1c939e85.3b5999",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c522b7fa.a4d9d",
        "type": "ui_group",
        "name": "Face 2",
        "tab": "adf63440.211c7",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "7ed8a98b.48af38",
        "type": "ui_group",
        "name": "Face 2 VizBlock Settings",
        "tab": "a6405cb3.31a948",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "3acdae75.d6d92a",
        "type": "ui_group",
        "name": "Face 2 Poll Setup",
        "tab": "bd04129c.d87dd",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d1556403.60a488",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "caz",
        "birthQos": "0",
        "birthPayload": "wiggle 100",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "6d292f7e46df5cef",
        "type": "ui_tab",
        "name": "Commands",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e8f4b2380aaf9065",
        "type": "ui_group",
        "name": "Face 1",
        "tab": "6d292f7e46df5cef",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "925e7756a4d8ad30",
        "type": "ui_group",
        "name": "Face 2",
        "tab": "6d292f7e46df5cef",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c716d8f1.4bb848",
        "type": "ui_group",
        "name": "bar-chart",
        "tab": "957fd14a.a1277",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "957fd14a.a1277",
        "type": "ui_tab",
        "name": "Poll Results",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f47b9e20b620c02a",
        "type": "ui_spacer",
        "z": "52bac4d7.a2850c",
        "name": "spacer",
        "group": "7ed8a98b.48af38",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "242e8a2deddfc551",
        "type": "ui_spacer",
        "z": "52bac4d7.a2850c",
        "name": "spacer",
        "group": "7ed8a98b.48af38",
        "order": 4,
        "width": "1",
        "height": "2"
    },
    {
        "id": "a4f664876522e645",
        "type": "ui_group",
        "name": "Face 1 Results",
        "tab": "957fd14a.a1277",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c0df183a28956a0f",
        "type": "ui_group",
        "name": "Face 2 Results",
        "tab": "957fd14a.a1277",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cf09a851.293978",
        "type": "websocket in",
        "z": "e2e29080.3c168",
        "name": "",
        "server": "bc95cc0b.71d6b",
        "client": "",
        "x": 207.26666259765625,
        "y": 190.26666259765625,
        "wires": [
            [
                "72d6976.10e1c68"
            ]
        ]
    },
    {
        "id": "b9d56f0.f67949",
        "type": "comment",
        "z": "e2e29080.3c168",
        "name": "Listen for and handle input from ALL pages",
        "info": "# Handling input\n\nWe get 1 message for EVERY input changed (*not* 1 msg per page).\n\nThe JSON returned to this ws contains the page it was on, \nany url parameters and the specific input that was changed.\n\nFinding the input field name and the value can be a challange since\nit depends heavily on the HTML used.\n\nFor normal INPUT fields we recieve:\n```\n{\n\t'timestamp' \t: e.timeStamp,\n\t// What type of input field\n\t'type' \t\t\t: e.target.type,\n\t// ID of the form this input field belongs to\n\t'frmId'\t\t\t: $( this ).closest('form').attr('id'),\n\t// Name/ID of the element one or both may be set\n\t'name' \t\t\t: $( this ).prop(\"name\"),\n\t'id' \t\t\t: $( this ).prop(\"id\"),\n\t'willValidate' \t: e.target.willValidate,\n\t'placeHolder' \t: e.target.placeHolder,\n\t'defaultValue' \t: e.target.defaultValue,\n\t// Value is only ever a singleton string. Use val for multi-values\n\t'value' \t\t: e.target.value, // only ever returns 1 value (string)\n\t'valueAsNumber' : e.target.valueAsNumber,\n\t// Will be on/off for switches/checkboxes\n\t'checked' \t\t: $( this ).prop(\"checked\"),\n\t// returns an array for multi-selects\n\t'val' \t\t\t: $( this ).val(),\n\t// Where are we? Used on server to id which page this is from\n\t'url'\t\t\t: location.pathname,\n\t'query'\t\t\t: location.search\n}\n```\n\nBut Zurb foundation also has a \"slider\" which isn't an input field, this returns:\n\n```\n{\n\t'timestamp' : e.timeStamp,\n\t'type' \t\t: 'slider',\n\t'frmId'\t\t: $( this ).closest('form').attr('id'),\n\t'id' \t\t: $( this ).prop(\"id\"),\n\t'value' \t: $( this ).attr('data-slider'),\n\t'val' \t\t: $( this ).attr('data-slider'),\n\t'url'\t\t: location.pathname,\n\t'query'\t\t: location.search\n}\n```\n\n# How do we tie this to a specific client session?\n\ne.g. a specific instance of a page request.\n\nWe don't!\n\nThe trick is to accept input, do something, send output - \nwebsockets ensures the send is to the same client unless\nthe client id is deleted (in which case it is broadcast).\n\nThere is no link between the socket and the original page\nrequest/response.\n\nWe could set an ID in the original response and then send\nthat back with the socket message. But there will be issues\nof security to deal with (*) and a need to maintain a list (db)\nof active clients. Better to try to avoid this overhead.\n\n(*) Random ID (token) - should seed with clients IP address \nand other  info to ensure unquiquness to a single client\nconnection. Also need to age the token (expire it) and to\nvalidate that subsequent reciepts of the token come from the\ncorrect client.",
        "x": 280.26661682128906,
        "y": 145.59999084472656,
        "wires": []
    },
    {
        "id": "b63c66e5.9bb7a8",
        "type": "function",
        "z": "e2e29080.3c168",
        "name": "Set topic: INPUT/<url page name>",
        "func": "// Safe object checking\nvar toClass = {}.toString\n\n// Parse payload\nif ( toClass.call( msg.payload ) == '[object String]' ) {\n    msg.payload = JSON.parse(msg.payload);\n} else {\n    msg.payload1 = toClass.call( msg.payload );\n}\n// Set msg topic to INPUT/<url page name> for convenience of handling\nmsg.topic = \"INPUT\" + msg.payload.url;\nreturn msg;",
        "outputs": 1,
        "x": 564.9832916259766,
        "y": 189.98326110839844,
        "wires": [
            []
        ]
    },
    {
        "id": "72d6976.10e1c68",
        "type": "rbe",
        "z": "e2e29080.3c168",
        "name": "",
        "func": "rbe",
        "gap": "",
        "x": 342.98329162597656,
        "y": 189.98326110839844,
        "wires": [
            [
                "b63c66e5.9bb7a8"
            ]
        ]
    },
    {
        "id": "47c941ee.6864a",
        "type": "comment",
        "z": "e2e29080.3c168",
        "name": "Add a SWITCH node to filter output",
        "info": "",
        "x": 1020.2666625976562,
        "y": 138.26666259765625,
        "wires": []
    },
    {
        "id": "ac61577b.ea3be8",
        "type": "http in",
        "z": "a7930a9b.9e77d8",
        "name": "",
        "url": "/data",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "3dfdd1fa.91924e"
            ]
        ]
    },
    {
        "id": "f615cfb1.6c784",
        "type": "http response",
        "z": "a7930a9b.9e77d8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 210,
        "y": 220,
        "wires": []
    },
    {
        "id": "370fb6db.bef66a",
        "type": "function",
        "z": "a7930a9b.9e77d8",
        "name": "return msg.payload to client",
        "func": "msg.payload = 'data was submitted and available in the msg.payload: '+msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 280,
        "y": 180,
        "wires": [
            [
                "f615cfb1.6c784"
            ]
        ]
    },
    {
        "id": "3dfdd1fa.91924e",
        "type": "json",
        "z": "a7930a9b.9e77d8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 210,
        "y": 140,
        "wires": [
            [
                "370fb6db.bef66a"
            ]
        ]
    },
    {
        "id": "ca5ea4d249ff28a1",
        "type": "ui_text_input",
        "z": "2843e038da0bd592",
        "name": "Face 1 Question Text",
        "label": "Question...",
        "tooltip": "",
        "group": "98582f48.ad9928",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "question",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 140,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "c23f68dfbf75b22f",
        "type": "ui_dropdown",
        "z": "2843e038da0bd592",
        "name": "Face 1 Reaction 1 dropdown",
        "label": "Answer 1 reaction",
        "tooltip": "",
        "place": "Select",
        "group": "98582f48.ad9928",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Emotion 1",
                "value": "face1_emotion1",
                "type": "str"
            },
            {
                "label": "Emotion 2",
                "value": "face1_emotion2",
                "type": "str"
            },
            {
                "label": "Emotion 3",
                "value": "face1_emotion3",
                "type": "str"
            },
            {
                "label": "Emotion 4",
                "value": "face1_emotion4",
                "type": "str"
            },
            {
                "label": "Emotion 5",
                "value": "face1_emotion5",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "face1_reaction1",
        "topicType": "str",
        "className": "",
        "x": 160,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "d06c0c9eb30ff651",
        "type": "ui_slider",
        "z": "2843e038da0bd592",
        "d": true,
        "name": "",
        "label": "Voting threshold",
        "tooltip": "The percentage of votes needed for answer 1 to be the result.",
        "group": "98582f48.ad9928",
        "order": 13,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "face1_poll_threshold",
        "topicType": "str",
        "min": "1",
        "max": "99",
        "step": 1,
        "className": "",
        "x": 120,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "69436e860101e84d",
        "type": "ui_dropdown",
        "z": "2843e038da0bd592",
        "name": "Reaction 2 dropdown",
        "label": "Answer 2 Reaction",
        "tooltip": "",
        "place": "Select",
        "group": "98582f48.ad9928",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Emotion 1",
                "value": "face1_emotion1",
                "type": "str"
            },
            {
                "label": "Emotion 2",
                "value": "face1_emotion2",
                "type": "str"
            },
            {
                "label": "Emotion 3",
                "value": "face1_emotion3",
                "type": "str"
            },
            {
                "label": "Emotion 4",
                "value": "face1_emotion4",
                "type": "str"
            },
            {
                "label": "Emotion 5",
                "value": "face1_emotion5",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "face1_reaction2",
        "topicType": "str",
        "className": "",
        "x": 140,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "05c2ed66251ee2b1",
        "type": "ui_switch",
        "z": "2843e038da0bd592",
        "name": "",
        "label": "Open Voting",
        "tooltip": "",
        "group": "98582f48.ad9928",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "face1_votingIsLive",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 110,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "f67f4da82ffee6bc",
        "type": "ui_button",
        "z": "2843e038da0bd592",
        "name": "Reset Poll Button",
        "group": "98582f48.ad9928",
        "order": 14,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset Polling",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "face1_resetPoll",
        "payloadType": "str",
        "topic": "face1_resetPoll",
        "topicType": "str",
        "x": 130,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "a8a91c9bdb794c7c",
        "type": "ui_switch",
        "z": "2843e038da0bd592",
        "name": "displayOnClose Button",
        "label": "Display Result on Close",
        "tooltip": "Sends results to Vizblocks on poll close.",
        "group": "98582f48.ad9928",
        "order": 16,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "face1_displayOnClose",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 150,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "7dfea91bbdd61cb5",
        "type": "ui_button",
        "z": "2843e038da0bd592",
        "name": "results button",
        "group": "98582f48.ad9928",
        "order": 17,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Display Result",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 120,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "3333e6f41e88f30b",
        "type": "ui_text_input",
        "z": "2843e038da0bd592",
        "name": "Question Text",
        "label": "Question...",
        "tooltip": "",
        "group": "3acdae75.d6d92a",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "question",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 720,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "65b608442d774244",
        "type": "ui_dropdown",
        "z": "2843e038da0bd592",
        "name": "Reaction 1 dropdown",
        "label": "Answer 1 reaction",
        "tooltip": "",
        "place": "Select",
        "group": "3acdae75.d6d92a",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Emotion 1",
                "value": "face2_emotion1",
                "type": "str"
            },
            {
                "label": "Emotion 2",
                "value": "face2_emotion2",
                "type": "str"
            },
            {
                "label": "Emotion 3",
                "value": "face2_emotion3",
                "type": "str"
            },
            {
                "label": "Emotion 4",
                "value": "face2_emotion4",
                "type": "str"
            },
            {
                "label": "Emotion 5",
                "value": "face2_emotion5",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "face2_reaction1",
        "topicType": "str",
        "className": "",
        "x": 740,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "d76c16fbbda57862",
        "type": "ui_slider",
        "z": "2843e038da0bd592",
        "d": true,
        "name": "",
        "label": "Voting threshold",
        "tooltip": "The percentage of votes needed for answer 1 to be the result.",
        "group": "3acdae75.d6d92a",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "face2_poll_threshold",
        "topicType": "str",
        "min": "1",
        "max": "99",
        "step": 1,
        "className": "",
        "x": 720,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "df9461e7aef7b1d8",
        "type": "ui_dropdown",
        "z": "2843e038da0bd592",
        "name": "Reaction 2 dropdown",
        "label": "Answer 2 Reaction",
        "tooltip": "",
        "place": "Select",
        "group": "3acdae75.d6d92a",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Emotion 1",
                "value": "face2_emotion1",
                "type": "str"
            },
            {
                "label": "Emotion 2",
                "value": "face2_emotion2",
                "type": "str"
            },
            {
                "label": "Emotion 3",
                "value": "face2_emotion3",
                "type": "str"
            },
            {
                "label": "Emotion 4",
                "value": "face2_emotion4",
                "type": "str"
            },
            {
                "label": "Emotion 5",
                "value": "face2_emotion5",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "face2_reaction2",
        "topicType": "str",
        "className": "",
        "x": 740,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "f39a8a099011ccb6",
        "type": "ui_switch",
        "z": "2843e038da0bd592",
        "name": "",
        "label": "Open Voting",
        "tooltip": "",
        "group": "3acdae75.d6d92a",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "face2_votingIsLive",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 710,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "976612393ce062e4",
        "type": "ui_button",
        "z": "2843e038da0bd592",
        "name": "Reset Poll Button",
        "group": "3acdae75.d6d92a",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset Polling",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "face2_resetPoll",
        "payloadType": "str",
        "topic": "face2_resetPoll",
        "topicType": "str",
        "x": 730,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "5bb4e2a3b4e39f74",
        "type": "ui_button",
        "z": "2843e038da0bd592",
        "name": "results button",
        "group": "3acdae75.d6d92a",
        "order": 12,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Display Result",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 720,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "09444b08fb7821d6",
        "type": "ui_switch",
        "z": "2843e038da0bd592",
        "name": "displayOnClose Button",
        "label": "Display Result on Close",
        "tooltip": "Sends results to Vizblocks on poll close.",
        "group": "3acdae75.d6d92a",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "face2_displayOnClose",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 750,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "1793283ab19432c8",
        "type": "ui_dropdown",
        "z": "2843e038da0bd592",
        "name": "Reaction 3 dropdown",
        "label": "Answer 3 Reaction",
        "tooltip": "",
        "place": "Select",
        "group": "98582f48.ad9928",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Emotion 1",
                "value": "face1_emotion1",
                "type": "str"
            },
            {
                "label": "Emotion 2",
                "value": "face1_emotion2",
                "type": "str"
            },
            {
                "label": "Emotion 3",
                "value": "face1_emotion3",
                "type": "str"
            },
            {
                "label": "Emotion 4",
                "value": "face1_emotion4",
                "type": "str"
            },
            {
                "label": "Emotion 5",
                "value": "face1_emotion5",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "face1_reaction3",
        "topicType": "str",
        "className": "",
        "x": 140,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "531885672c572c48",
        "type": "ui_dropdown",
        "z": "2843e038da0bd592",
        "name": "Reaction 4 dropdown",
        "label": "Answer 4 Reaction",
        "tooltip": "",
        "place": "Select",
        "group": "98582f48.ad9928",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Emotion 1",
                "value": "face1_emotion1",
                "type": "str"
            },
            {
                "label": "Emotion 2",
                "value": "face1_emotion2",
                "type": "str"
            },
            {
                "label": "Emotion 3",
                "value": "face1_emotion3",
                "type": "str"
            },
            {
                "label": "Emotion 4",
                "value": "face1_emotion4",
                "type": "str"
            },
            {
                "label": "Emotion 5",
                "value": "face1_emotion5",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "face1_reaction4",
        "topicType": "str",
        "className": "",
        "x": 140,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "e041e488a2b0a4d2",
        "type": "ui_dropdown",
        "z": "2843e038da0bd592",
        "name": "Reaction 5 dropdown",
        "label": "Answer 5 Reaction",
        "tooltip": "",
        "place": "Select",
        "group": "98582f48.ad9928",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Emotion 1",
                "value": "face1_emotion1",
                "type": "str"
            },
            {
                "label": "Emotion 2",
                "value": "face1_emotion2",
                "type": "str"
            },
            {
                "label": "Emotion 3",
                "value": "face1_emotion3",
                "type": "str"
            },
            {
                "label": "Emotion 4",
                "value": "face1_emotion4",
                "type": "str"
            },
            {
                "label": "Emotion 5",
                "value": "face1_emotion5",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "face1_reaction5",
        "topicType": "str",
        "className": "",
        "x": 140,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "b38be7c9cce01c2f",
        "type": "ui_dropdown",
        "z": "2843e038da0bd592",
        "name": "Reaction 4 dropdown",
        "label": "Answer 4 Reaction",
        "tooltip": "",
        "place": "Select",
        "group": "3acdae75.d6d92a",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Emotion 1",
                "value": "face2_emotion1",
                "type": "str"
            },
            {
                "label": "Emotion 2",
                "value": "face2_emotion2",
                "type": "str"
            },
            {
                "label": "Emotion 3",
                "value": "face2_emotion3",
                "type": "str"
            },
            {
                "label": "Emotion 4",
                "value": "face2_emotion4",
                "type": "str"
            },
            {
                "label": "Emotion 5",
                "value": "face2_emotion5",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "face2_reaction4",
        "topicType": "str",
        "className": "",
        "x": 740,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "a6279416d770feb6",
        "type": "ui_dropdown",
        "z": "2843e038da0bd592",
        "name": "Reaction 3 dropdown",
        "label": "Answer 3 reaction",
        "tooltip": "",
        "place": "Select",
        "group": "3acdae75.d6d92a",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Emotion 1",
                "value": "face2_emotion1",
                "type": "str"
            },
            {
                "label": "Emotion 2",
                "value": "face2_emotion2",
                "type": "str"
            },
            {
                "label": "Emotion 3",
                "value": "face2_emotion3",
                "type": "str"
            },
            {
                "label": "Emotion 4",
                "value": "face2_emotion4",
                "type": "str"
            },
            {
                "label": "Emotion 5",
                "value": "face2_emotion5",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "face2_reaction3",
        "topicType": "str",
        "className": "",
        "x": 740,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "4da9a644719bd807",
        "type": "ui_dropdown",
        "z": "2843e038da0bd592",
        "name": "Reaction 5 dropdown",
        "label": "Answer 5 Reaction",
        "tooltip": "",
        "place": "Select",
        "group": "3acdae75.d6d92a",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Emotion 1",
                "value": "face2_emotion1",
                "type": "str"
            },
            {
                "label": "Emotion 2",
                "value": "face2_emotion2",
                "type": "str"
            },
            {
                "label": "Emotion 3",
                "value": "face2_emotion3",
                "type": "str"
            },
            {
                "label": "Emotion 4",
                "value": "face2_emotion4",
                "type": "str"
            },
            {
                "label": "Emotion 5",
                "value": "face2_emotion5",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "face2_reaction5",
        "topicType": "str",
        "className": "",
        "x": 740,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "67ed5ca0.3cd034",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "DEFAULT SETTINGS",
        "func": "// ***************************. DEFAULTS *********************************** //\n// You can change the default vizblock mappings by editing the defualt_mappings \n// variable below:\nvar default_mappings = {\n    'bob': {feature: 'left eyebrow', type: 'servo', face: 1, 'phone': 1},\n    'joy': {feature: 'right eyebrow', type: 'servo', face: 1, 'phone': 1},\n    'eve': {feature: 'left eye', type: 'pixel', face: 1, 'phone': 1},\n    'fin': {feature: 'right eye', type: 'pixel', face: 1, 'phone': 1},\n    'caz': {feature: 'mouth', type: 'servo', face: 1, 'phone': 1},\n    'tim': {feature: 'left eyebrow', type: 'servo', face: 2, 'phone': 1},\n    'jim': {feature: 'right eyebrow', type: 'servo', face: 2, 'phone': 1},\n    'ada': {feature: 'left eye', type: 'pixel', face: 2, 'phone': 1},\n    'ben': {feature: 'right eye', type: 'pixel', face: 2, 'phone': 1},\n    'lou': {feature: 'mouth', type: 'servo', face: 2, 'phone': 1}\n};\nflow.set('emotion6_l_eye_colour', 'red');\nflow.set('emotion6_l_eye_count', 0);\nflow.set('emotion6_r_eye_colour', 'red');\nflow.set('emotion6_r_eye_count', 0);\nflow.set('emotion6_l_eyebrow_angle', 0);\nflow.set('emotion6_r_eyebrow_angle', 0);\nflow.set('emotion6_mouth_angle', 0);\nflow.get('emotion6_l_eyebrow_command', \"none\");\nflow.set('emotion6_r_eyebrow_command', \"none\");\nflow.set('emotion6_l_eye_command', \"none\");\nflow.set('emotion6_r_eye_command', \"none\");\nflow.set('emotion6_mouth_command', \"none\");\n\n// each of these settings has 2 entries - for face 1 and face 2\nvar default_data_source = ['emotion', 'emotion']; // data source for [face 1, face 2] (emotion or dataset)\nvar default_continuous = [false, false];\nvar default_face_features = [false, false];\n// ************************************************************************* //\n\nvar payload = msg.payload;\nmsg = {};\n\n// if we get a reset input then reset the settings to default (defined abbove)\nif (payload === 'reset'){\n    msg.mappings = default_mappings;\n    msg.data_source = default_data_source;\n    msg.continuous = default_continuous;\n    msg.face_features = default_face_features;\n    flow.set('mappings', msg.mappings);\n    flow.set('data_source', msg.data_source);\n    flow.set('continuous', msg.continuous);\n    flow.set('face_features', msg.face_features);\n} \nelse { // else get current flow settings\n    msg.mappings = flow.get('mappings') || default_mappings;\n    msg.data_source = flow.get('data_source') || default_data_source;\n    msg.continuous = flow.get('continuous') || default_continuous;\n    msg.face_features = flow.get('face_features') || default_face_features;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 300,
        "y": 540,
        "wires": [
            [
                "bd5c6c23.20697",
                "8b28d4d9.70b528"
            ]
        ]
    },
    {
        "id": "872c61e3.98945",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "Controller state saver",
        "func": "if (typeof msg.block_name != 'undefined'){\n    flow.set(msg.block_name, msg.payload)\n    return [{topic:msg.block_name, payload: msg.payload}];\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1020,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "449e70f0.ce074",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "Data processing",
        "func": "var mappings = flow.get('mappings') || 0;\nif (mappings === 0) {\n    msg.payload = \"No mappings found\";\n    return msg;\n}\n\nvar output_msg = [];\nvar blocks = Object.keys(mappings);\nvar data_source = flow.get('data_source') || ['emotion', 'emotion'];\nvar continuous= flow.get('continuous') || [false, false];\nvar happy = parseInt(msg.payload.happy);\nvar sad= parseInt(msg.payload.sad);\n\nif (msg.payload.clientId === \"\"){\n    if (happy < 50){\n        sad = 100 - happy;\n    }\n}\n\n// go through all blocks and update their state accordingly\nfor (i = 0; i < blocks.length; i++){\n    if ((msg.payload.clientId === \"\" && data_source[mappings[blocks[i]].face -1] === 'dataset') || (msg.payload.clientId == mappings[blocks[i]].phone && data_source[mappings[blocks[i]].face -1] === 'emotion')){\n        \n        var block_continuous = continuous[mappings[blocks[i]].face -1]\n        \n        // if it's a servo block\n        if (mappings[blocks[i]].type === 'servo'){\n            var behaviour = flow.get(blocks[i]) || 0;\n            if (behaviour === 0){\n                continue;\n            }\n            // if continuous emotion\n            if (block_continuous === true) {\n                var target_angle = parseInt(behaviour.happy_angle);\n                var opposite_angle = parseInt(behaviour.sad_angle);\n                var emotion_level = happy;\n                if ( sad > happy ) {\n                    target_angle = parseInt(behaviour.sad_angle);\n                    opposite_angle = parseInt(behaviour.happy_angle);\n                    emotion_level = sad;\n                }\n                if (target_angle >= opposite_angle){\n                    var halfrange = Math.round((target_angle - opposite_angle) / 2);\n                    var midpoint = opposite_angle + halfrange;\n                    var angle = Math.round(target_angle - ((1-(emotion_level/100)) * halfrange));\n                } else {\n                    var halfrange = Math.round((opposite_angle - target_angle) / 2);\n                    var midpoint = target_angle + halfrange;\n                    var angle = Math.round(target_angle + ((1-(emotion_level/100)) * halfrange));\n                }\n                \n            } else { // else discrete emotion\n                var angle = parseInt(behaviour.happy_angle);\n                if (sad > happy){\n                    angle = parseInt(behaviour.sad_angle);\n                }\n            }\n            output_msg.push({topic: blocks[i], payload: 'goto ' + angle.toString()})\n        }\n        else if (mappings[blocks[i]].type === 'pixel'){ // else LED\n            var behaviour = flow.get(blocks[i]) || 0;\n            if (behaviour === 0){\n                continue;\n            }\n            var colour = behaviour.happy_colour;\n            var count = behaviour.happy_count;\n            if (sad > happy){\n                colour = behaviour.sad_colour;\n                count = behaviour.sad_count;\n            }\n            output_msg.push({topic: blocks[i], payload: colour + '_leds ' + count})\n        }\n    }\n}\n\nreturn [ output_msg ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 540,
        "y": 380,
        "wires": [
            [
                "1b6dded15d53cb04",
                "3cfcb614.581a2a"
            ]
        ]
    },
    {
        "id": "cc33bc7f.50c54",
        "type": "debug",
        "z": "52bac4d7.a2850c",
        "name": "debug face tracker input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 140,
        "wires": []
    },
    {
        "id": "26c665ab.02b83a",
        "type": "inject",
        "z": "52bac4d7.a2850c",
        "name": "Sad (phone 1)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"sad\":\"70\",\"happy\":\"1\",\"clientId\":\"1\"}",
        "payloadType": "json",
        "x": 130,
        "y": 260,
        "wires": [
            [
                "449e70f0.ce074",
                "4bee8244.3123cc"
            ]
        ]
    },
    {
        "id": "970718d0.7e9bc8",
        "type": "inject",
        "z": "52bac4d7.a2850c",
        "name": "Happy (phone 1)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"sad\":\"10\",\"happy\":\"100\",\"clientId\":\"1\"}",
        "payloadType": "json",
        "x": 140,
        "y": 300,
        "wires": [
            [
                "449e70f0.ce074"
            ]
        ]
    },
    {
        "id": "ddf5663e.843d88",
        "type": "subflow:a7930a9b.9e77d8",
        "z": "52bac4d7.a2850c",
        "name": "",
        "env": [],
        "x": 130,
        "y": 140,
        "wires": [
            [
                "449e70f0.ce074",
                "cc33bc7f.50c54"
            ]
        ]
    },
    {
        "id": "909e8a5b.7e02a8",
        "type": "inject",
        "z": "52bac4d7.a2850c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 110,
        "y": 540,
        "wires": [
            [
                "67ed5ca0.3cd034"
            ]
        ]
    },
    {
        "id": "c1f915d0.a25d68",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "Admin state saver",
        "func": "if (msg.topic == 'admin_change'){\n    flow.set('mappings', msg.mappings)\n    flow.set('data_source', msg.data_source)\n    flow.set('continuous', msg.continuous)\n    flow.set('face_features', msg.face_features)\n    new_msg = {};\n    new_msg.mappings = msg.mappings;\n    new_msg.data_source = msg.data_source;\n    new_msg.continuous = msg.continuous;\n    new_msg.face_features = msg.face_features;\n    return new_msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1010,
        "y": 280,
        "wires": [
            [
                "8b28d4d9.70b528"
            ]
        ]
    },
    {
        "id": "db7c81e1.93c25",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "Admin state saver",
        "func": "var mappings = flow.get('mappings') || 0;\nif (mappings === 0) {\n    msg.payload = \"No mappings found\";\n    return msg;\n}\n\nvar blocks = Object.keys(mappings);\n\nfor (i = 0; i < blocks.length; i++){\n    if (mappings[blocks[i]].type === 'servo') {\n        var servo_state = {'happy_angle': \"170\", 'sad_angle': \"0\"}\n        flow.set(blocks[i], servo_state)\n    } else if (mappings[blocks[i]].type === 'pixel') {\n        var pixel_state = { \"happy_colour\": \"orange\",\n                            \"happy_count\": 12,\n                            \"sad_colour\": \"blue\",\n                            \"sad_count\": 4,\n        }\n        flow.set(blocks[i], pixel_state)\n    }\n}",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 40,
        "wires": []
    },
    {
        "id": "2142d886.edbe68",
        "type": "inject",
        "z": "52bac4d7.a2850c",
        "name": "Assign default emotions",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 40,
        "wires": [
            [
                "db7c81e1.93c25"
            ]
        ]
    },
    {
        "id": "31345eb1.ef8a72",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "update UIs",
        "func": "// this just responds to updates from the uibuilder pages and triggers the setting update\n\nif (msg.uibuilderCtrl == 'ready for content' || msg.topic == 'admin_change'){\n    msg.payload = '';\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 690,
        "y": 540,
        "wires": [
            [
                "67ed5ca0.3cd034"
            ]
        ]
    },
    {
        "id": "1272052a.dc07cb",
        "type": "comment",
        "z": "52bac4d7.a2850c",
        "name": "This gets the input from the face tracking app at https://raspberrypi.local/face-tracker/#1 (phone 1)",
        "info": "Note: you must be connected directly to the VizBlocks network in order for the face tracker app to work. You also need to specify a phone id in the url using `#[phone id]`, e.g. `#1` for phone 1.",
        "x": 380,
        "y": 100,
        "wires": [],
        "icon": "font-awesome/fa-info-circle"
    },
    {
        "id": "aae444b0.8d4f48",
        "type": "comment",
        "z": "52bac4d7.a2850c",
        "name": "This lets you manually trigger emotion data as if it were coming from phone 1",
        "info": "",
        "x": 310,
        "y": 220,
        "wires": [],
        "icon": "font-awesome/fa-info-circle"
    },
    {
        "id": "8509face.423428",
        "type": "comment",
        "z": "52bac4d7.a2850c",
        "name": "This processes data from the face tracker",
        "info": "",
        "x": 640,
        "y": 340,
        "wires": [],
        "icon": "font-awesome/fa-info-circle"
    },
    {
        "id": "851f15ce.89c898",
        "type": "comment",
        "z": "52bac4d7.a2850c",
        "name": "Create admin UI at https://raspberrypi.local:1880/admin/  >>>>",
        "info": "",
        "x": 270,
        "y": 440,
        "wires": [],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "278c961e.969c0a",
        "type": "comment",
        "z": "52bac4d7.a2850c",
        "name": "Create controller UI at https://raspberrypi.local:1880/vizblock-controller/  >>>>",
        "info": "",
        "x": 310,
        "y": 620,
        "wires": [],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "d119cb1c.df6558",
        "type": "comment",
        "z": "52bac4d7.a2850c",
        "name": "Send to VizBlocks",
        "info": "",
        "x": 1830,
        "y": 860,
        "wires": [],
        "icon": "node-red/bridge-dash.svg"
    },
    {
        "id": "59e7c443.5ae6ac",
        "type": "comment",
        "z": "52bac4d7.a2850c",
        "name": "Click to reset default settings (loaded whenever Pi is restarted)",
        "info": "",
        "x": 260,
        "y": 500,
        "wires": [],
        "icon": "font-awesome/fa-info-circle"
    },
    {
        "id": "3cfcb614.581a2a",
        "type": "debug",
        "z": "52bac4d7.a2850c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 780,
        "wires": []
    },
    {
        "id": "4bee8244.3123cc",
        "type": "debug",
        "z": "52bac4d7.a2850c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 260,
        "wires": []
    },
    {
        "id": "42218f3a.85d4e8",
        "type": "ui_button",
        "z": "52bac4d7.a2850c",
        "name": "Emotion 1",
        "group": "3d9c3b97.79ae84",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "{{msg.payload}}",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "face1_emotion1",
        "payloadType": "str",
        "topic": "face1",
        "topicType": "str",
        "x": 2070,
        "y": 160,
        "wires": [
            [
                "e6174819.4c8868"
            ]
        ]
    },
    {
        "id": "2dcf29c.fbef1d6",
        "type": "ui_button",
        "z": "52bac4d7.a2850c",
        "name": "Emotion 2",
        "group": "3d9c3b97.79ae84",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "{{msg.payload}}",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "face1_emotion2",
        "payloadType": "str",
        "topic": "face1",
        "topicType": "str",
        "x": 2070,
        "y": 200,
        "wires": [
            [
                "e6174819.4c8868"
            ]
        ]
    },
    {
        "id": "dd4b592.498db28",
        "type": "ui_button",
        "z": "52bac4d7.a2850c",
        "name": "Emotion 3",
        "group": "3d9c3b97.79ae84",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "{{msg.payload}}",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "face1_emotion3",
        "payloadType": "str",
        "topic": "face1",
        "topicType": "str",
        "x": 2070,
        "y": 240,
        "wires": [
            [
                "e6174819.4c8868"
            ]
        ]
    },
    {
        "id": "222c839b.ad8054",
        "type": "ui_button",
        "z": "52bac4d7.a2850c",
        "name": "Emotion 4",
        "group": "3d9c3b97.79ae84",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "{{msg.payload}}",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "face1_emotion4",
        "payloadType": "str",
        "topic": "face1",
        "topicType": "str",
        "x": 2070,
        "y": 280,
        "wires": [
            [
                "e6174819.4c8868"
            ]
        ]
    },
    {
        "id": "230a643e.ea72fc",
        "type": "ui_button",
        "z": "52bac4d7.a2850c",
        "name": "Emotion 5",
        "group": "3d9c3b97.79ae84",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "{{msg.payload}}",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "face1_emotion5",
        "payloadType": "str",
        "topic": "face1",
        "topicType": "str",
        "x": 2070,
        "y": 320,
        "wires": [
            [
                "e6174819.4c8868"
            ]
        ]
    },
    {
        "id": "cf677505.3f099",
        "type": "ui_button",
        "z": "52bac4d7.a2850c",
        "name": "Emotion 6",
        "group": "3d9c3b97.79ae84",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Rest",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "face1_emotion6",
        "payloadType": "str",
        "topic": "face1",
        "topicType": "str",
        "x": 2070,
        "y": 360,
        "wires": [
            [
                "e6174819.4c8868"
            ]
        ]
    },
    {
        "id": "e6174819.4c8868",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "triggerEmotion",
        "func": "var emotion=msg.payload;\nnode.warn('The Payload ')\nnode.warn(msg.payload)\nvar output_msg = [];\n\nlet blocks = ['bob', 'joy', 'eve', 'fin', 'caz', 'tim', 'jim', 'ada', 'ben', 'lou']\n\nlet face = msg.topic\nvar increment = 0\nif (face === 'face2') {\n    increment = 5\n}\nif (emotion === 'face1_emotion6') {\n    output_msg.push({topic: blocks[0], payload: 'goto 0'});\n    output_msg.push({topic: blocks[1], payload: 'goto 0'});\n    output_msg.push({topic: blocks[2], payload: 'green_leds 0'});\n    output_msg.push({topic: blocks[3], payload: 'green_leds 0'});\n    output_msg.push({topic: blocks[4], payload: 'goto 0'});\n    return [output_msg];\n}\nif (emotion === 'face2_emotion6') {\n    output_msg.push({topic: blocks[5], payload: 'goto 0'});\n    output_msg.push({topic: blocks[6], payload: 'goto 0'});\n    output_msg.push({topic: blocks[7], payload: 'green_leds 0'});\n    output_msg.push({topic: blocks[8], payload: 'green_leds 0'});\n    output_msg.push({topic: blocks[9], payload: 'goto 0'});\n    return [output_msg];\n}\n//Left Eyebrow\nlet LEBCommand = flow.get(emotion + '_l_eyebrow_command') || 'none';\nlet LEBAngle = flow.get(emotion + '_l_eyebrow_angle') || 90;\nif (LEBCommand === 'none') {\n    output_msg.push({topic: blocks[0 + increment], payload: 'goto ' + LEBAngle});\n}\nelse {\n    output_msg.push({topic: blocks[0 + increment], payload: LEBCommand + ' ' + LEBAngle});\n}\n\n//Right Eyebrow\nlet REBCommand = flow.get(emotion + '_r_eyebrow_command') || 'none';\nlet REBAngle = flow.get(emotion + '_r_eyebrow_angle') || 90;\nif (REBCommand === 'none') {\n    output_msg.push({topic: blocks[1 + increment], payload: 'goto ' + REBAngle});\n}\nelse {\n    output_msg.push({topic: blocks[1 + increment], payload: REBCommand + ' ' + 90});\n}\n\n//Left Eye\nlet LECommand = flow.get(emotion + '_l_eye_command') || 'none';\nlet LEColour = flow.get(emotion + '_l_eye_colour') || 'green';\nlet LECount = flow.get(emotion + '_l_eye_count') || 12;\nlet LESpeed = flow.get(emotion + '_r_eye_speed') || 100;\nif (LECommand === 'none') {\n    output_msg.push({topic: blocks[2 + increment], payload: LEColour + '_leds ' + LECount});\n}\nelse if (LECommand === 'breathe') {\n    output_msg.push({topic: blocks[2 + increment], payload: LECommand + '_' + LEColour + ' ' +  LESpeed});\n}\nelse {\n    output_msg.push({topic: blocks[2 + increment], payload: LECommand + ' ' +  LESpeed});\n}\n\n//Right Eye\nlet RECommand = flow.get(emotion + '_r_eye_command') || 'none';\nlet REColour = flow.get(emotion + '_r_eye_colour') || 'green';\nlet RECount = flow.get(emotion + '_r_eye_count') || 12;\nlet RESpeed = flow.get(emotion + '_r_eye_speed') || 100;\nif (RECommand === 'none') {\n    output_msg.push({topic: blocks[3 + increment], payload: REColour + '_leds ' + RECount});\n}\nelse if (RECommand === 'breathe') {\n    output_msg.push({topic: blocks[3 + increment], payload: RECommand + '_' + REColour + ' ' +  RESpeed});\n}\nelse {\n    output_msg.push({topic: blocks[3 + increment], payload: RECommand + ' ' + RESpeed});\n}\n\n//Right Eyebrow\nlet mouthCommand = flow.get(emotion + '_mouth_command') || 'none';\nlet mouthAngle = flow.get(emotion + '_mouth_angle') || 90;\nif (mouthCommand === 'none') {\n    output_msg.push({topic: blocks[4 + increment], payload: 'goto ' + mouthAngle});\n}\nelse {\n    output_msg.push({topic: blocks[4 + increment], payload: mouthCommand + ' ' + 90});\n}\n\nreturn [output_msg];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2340,
        "y": 360,
        "wires": [
            [
                "d611b1ef.d9cfb",
                "1b6dded15d53cb04"
            ]
        ]
    },
    {
        "id": "d611b1ef.d9cfb",
        "type": "debug",
        "z": "52bac4d7.a2850c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2350,
        "y": 160,
        "wires": []
    },
    {
        "id": "d02399b5.91b3",
        "type": "comment",
        "z": "52bac4d7.a2850c",
        "name": "https://raspberrypi.local:1880/ui/",
        "info": "",
        "x": 2130,
        "y": 120,
        "wires": []
    },
    {
        "id": "72dc02f.a8dabfc",
        "type": "ui_slider",
        "z": "52bac4d7.a2850c",
        "d": true,
        "name": "Left Eyebrow Angle",
        "label": "Left Angle",
        "tooltip": "",
        "group": "e7ea26e6.3e9db",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "l_eyebrow_angle",
        "topicType": "str",
        "min": "1",
        "max": "180",
        "step": 1,
        "className": "",
        "x": 2870,
        "y": 260,
        "wires": [
            [
                "cb716f51.65a29"
            ]
        ]
    },
    {
        "id": "80f10bea.f6ce8",
        "type": "ui_slider",
        "z": "52bac4d7.a2850c",
        "d": true,
        "name": "Right Eyebrow Angle",
        "label": "Right Angle",
        "tooltip": "block: joy",
        "group": "e7ea26e6.3e9db",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "r_eyebrow_angle",
        "topicType": "str",
        "min": "1",
        "max": "180",
        "step": 1,
        "className": "",
        "x": 2880,
        "y": 360,
        "wires": [
            [
                "cb716f51.65a29"
            ]
        ]
    },
    {
        "id": "b913d941.381b68",
        "type": "ui_text",
        "z": "52bac4d7.a2850c",
        "group": "e7ea26e6.3e9db",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Set the angle for the eyebrows",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 2910,
        "y": 220,
        "wires": []
    },
    {
        "id": "57c71e36.9fe28",
        "type": "debug",
        "z": "52bac4d7.a2850c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3930,
        "y": 580,
        "wires": []
    },
    {
        "id": "cb716f51.65a29",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "Face 1",
        "func": "let topic = msg.topic;\nlet payload = msg.payload;\n\nlet currentEmotion = flow.get('face1_' + 'currentEmotion') || 'face1_emotion1'\n\nswitch (topic) {\n    case 'name':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n    case 'l_eye_colour':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n    case 'l_eye_count':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n    case 'r_eye_colour':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n    case 'r_eye_count':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n    case 'l_eyebrow_angle':\n        flow.set(currentEmotion + '_' + 'l_eyebrow_angle', payload)\n        break\n    case 'r_eyebrow_angle':\n        flow.set(currentEmotion + '_' + topic, msg.payload)\n        break\n    case 'mouth_angle':\n        flow.set(currentEmotion + '_' + topic, msg.payload)\n        break\n    case 'l_eyebrow_command':\n        break\n    case 'r_eyebrow_command':\n        break\n    case 'l_eye_command':\n        break\n    case 'r_eye_command':\n        break\n    case 'mouth':\n        break\n}\nnode.warn('The message being set is ' + currentEmotion + ' ' + topic + '_' + payload)\nreturn {topic: currentEmotion,payload: topic + '_' + payload}\n\n//flow.set('angry' + msg.topic, msg.payload)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3370,
        "y": 700,
        "wires": [
            [
                "57c71e36.9fe28"
            ]
        ]
    },
    {
        "id": "244fb538.7b5b22",
        "type": "ui_text",
        "z": "52bac4d7.a2850c",
        "group": "e7ea26e6.3e9db",
        "order": 20,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Set the colour and light count for Right Eye",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 2950,
        "y": 600,
        "wires": []
    },
    {
        "id": "a9967124.678228",
        "type": "ui_dropdown",
        "z": "52bac4d7.a2850c",
        "name": "Right Eye Colour",
        "label": "LED Colour",
        "tooltip": "Sets right eye colour",
        "place": "Select option",
        "group": "e7ea26e6.3e9db",
        "order": 21,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "White",
                "value": "white",
                "type": "str"
            },
            {
                "label": "Red",
                "value": "red",
                "type": "str"
            },
            {
                "label": "Orange",
                "value": "orange",
                "type": "str"
            },
            {
                "label": "Yellow",
                "value": "yellow",
                "type": "str"
            },
            {
                "label": "Green",
                "value": "green",
                "type": "str"
            },
            {
                "label": "Blue",
                "value": "blue",
                "type": "str"
            },
            {
                "label": "Pink",
                "value": "pink",
                "type": "str"
            },
            {
                "label": "Purple",
                "value": "purple",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "r_eye_colour",
        "topicType": "str",
        "className": "",
        "x": 2870,
        "y": 640,
        "wires": [
            [
                "cb716f51.65a29"
            ]
        ]
    },
    {
        "id": "49e38e7c.b3f648",
        "type": "ui_slider",
        "z": "52bac4d7.a2850c",
        "d": true,
        "name": "Right Eye Count",
        "label": "LED Count",
        "tooltip": "",
        "group": "e7ea26e6.3e9db",
        "order": 22,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "r_eye_count",
        "topicType": "str",
        "min": "1",
        "max": "12",
        "step": 1,
        "className": "",
        "x": 2860,
        "y": 680,
        "wires": [
            [
                "cb716f51.65a29"
            ]
        ]
    },
    {
        "id": "2199d7cb.e4a51",
        "type": "ui_text_input",
        "z": "52bac4d7.a2850c",
        "name": "",
        "label": "Emotion Name",
        "tooltip": "",
        "group": "e7ea26e6.3e9db",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "name",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2860,
        "y": 180,
        "wires": [
            [
                "cb716f51.65a29"
            ]
        ]
    },
    {
        "id": "52ebb5dd.1028e4",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "",
        "func": "let name=flow.get('face1_emotion1_name') || 'Emotion 1'\nnode.warn(name)\nreturn {topic: 'title', payload: name};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1920,
        "y": 160,
        "wires": [
            [
                "42218f3a.85d4e8"
            ]
        ]
    },
    {
        "id": "3a21f2af.1527be",
        "type": "ui_ui_control",
        "z": "52bac4d7.a2850c",
        "name": "",
        "events": "all",
        "x": 1460,
        "y": 280,
        "wires": [
            [
                "52ebb5dd.1028e4",
                "2f3f4e0a.ae1a22",
                "d5124293.7b7cd8",
                "29f557be.3e9c38",
                "accec52.0195838",
                "65a6b14b.f9fde",
                "ed6c6535.4375",
                "766621dc.33e5",
                "4232b283.0be034",
                "c5c55df5.6affe"
            ]
        ]
    },
    {
        "id": "2f3f4e0a.ae1a22",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "",
        "func": "let name=flow.get('face1_emotion2_name') || 'Emotion 2'\n\nreturn {topic: 'title', payload: name};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1920,
        "y": 200,
        "wires": [
            [
                "2dcf29c.fbef1d6"
            ]
        ]
    },
    {
        "id": "d5124293.7b7cd8",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "",
        "func": "let name=flow.get('face1_emotion3_name') || 'Emotion 3'\n\nreturn {topic: 'title', payload: name};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1920,
        "y": 240,
        "wires": [
            [
                "dd4b592.498db28"
            ]
        ]
    },
    {
        "id": "29f557be.3e9c38",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "",
        "func": "let name=flow.get('face1_emotion4_name') || 'Emotion 4'\n\nreturn {topic: 'title', payload: name};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1920,
        "y": 280,
        "wires": [
            [
                "222c839b.ad8054"
            ]
        ]
    },
    {
        "id": "accec52.0195838",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "",
        "func": "let name=flow.get('face1_emotion5_name') || 'Emotion 5'\n\nreturn {topic: 'title', payload: name};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1920,
        "y": 320,
        "wires": [
            [
                "230a643e.ea72fc"
            ]
        ]
    },
    {
        "id": "2c2ae3fd.6ef314",
        "type": "ui_text",
        "z": "52bac4d7.a2850c",
        "group": "e7ea26e6.3e9db",
        "order": 13,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Set the colour and light count for Left Eye",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 2940,
        "y": 440,
        "wires": []
    },
    {
        "id": "e5f99c1a.b5b718",
        "type": "ui_dropdown",
        "z": "52bac4d7.a2850c",
        "name": "Left Eye Colour",
        "label": "LED Colour",
        "tooltip": "Sets left eye colour",
        "place": "Select option",
        "group": "e7ea26e6.3e9db",
        "order": 14,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "White",
                "value": "white",
                "type": "str"
            },
            {
                "label": "Red",
                "value": "red",
                "type": "str"
            },
            {
                "label": "Orange",
                "value": "orange",
                "type": "str"
            },
            {
                "label": "Yellow",
                "value": "yellow",
                "type": "str"
            },
            {
                "label": "Green",
                "value": "green",
                "type": "str"
            },
            {
                "label": "Blue",
                "value": "blue",
                "type": "str"
            },
            {
                "label": "Pink",
                "value": "pink",
                "type": "str"
            },
            {
                "label": "Purple",
                "value": "purple",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "l_eye_colour",
        "topicType": "str",
        "className": "",
        "x": 2860,
        "y": 480,
        "wires": [
            [
                "cb716f51.65a29"
            ]
        ]
    },
    {
        "id": "941432bc.c575a8",
        "type": "ui_slider",
        "z": "52bac4d7.a2850c",
        "d": true,
        "name": "Left Eye Count",
        "label": "LED Count",
        "tooltip": "",
        "group": "e7ea26e6.3e9db",
        "order": 15,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "l_eye_count",
        "topicType": "str",
        "min": "1",
        "max": "12",
        "step": 1,
        "className": "",
        "x": 2860,
        "y": 520,
        "wires": [
            [
                "cb716f51.65a29"
            ]
        ]
    },
    {
        "id": "f149ae54.dfa4d",
        "type": "ui_text",
        "z": "52bac4d7.a2850c",
        "group": "e7ea26e6.3e9db",
        "order": 26,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Set the angle for the mouth",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 2900,
        "y": 780,
        "wires": []
    },
    {
        "id": "7fdef730.a8afa8",
        "type": "ui_slider",
        "z": "52bac4d7.a2850c",
        "d": true,
        "name": "Mouth Angle",
        "label": "Angle",
        "tooltip": "",
        "group": "e7ea26e6.3e9db",
        "order": 27,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "mouth_angle",
        "topicType": "str",
        "min": "1",
        "max": "180",
        "step": 1,
        "className": "",
        "x": 2850,
        "y": 820,
        "wires": [
            [
                "cb716f51.65a29"
            ]
        ]
    },
    {
        "id": "ec9f84d0.3bbc2",
        "type": "ui_ui_control",
        "z": "52bac4d7.a2850c",
        "name": "",
        "events": "all",
        "x": 2580,
        "y": 100,
        "wires": [
            [
                "81082733.2956f8"
            ]
        ]
    },
    {
        "id": "fbd8f533.210b5",
        "type": "ui_dropdown",
        "z": "52bac4d7.a2850c",
        "name": "",
        "label": "Choose Emotion",
        "tooltip": "",
        "place": "Select option",
        "group": "e7ea26e6.3e9db",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Emotion 1",
                "value": "face1_emotion1",
                "type": "str"
            },
            {
                "label": "Emotion 2",
                "value": "face1_emotion2",
                "type": "str"
            },
            {
                "label": "Emotion 3",
                "value": "face1_emotion3",
                "type": "str"
            },
            {
                "label": "Emotion 4",
                "value": "face1_emotion4",
                "type": "str"
            },
            {
                "label": "Emotion 5",
                "value": "face1_emotion5",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "face1_currentEmotion",
        "topicType": "str",
        "className": "",
        "x": 2950,
        "y": 100,
        "wires": [
            [
                "89802df7.1e3938",
                "1ff39aba.cd51fd"
            ]
        ]
    },
    {
        "id": "89802df7.1e3938",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "updateEmotionValues",
        "func": "let topic = msg.topic;\nlet payload = msg.payload;\n\nlet currentEmotion = payload\nflow.set('face1_currentEmotion', currentEmotion)\nvar name = ''\n\nname = flow.get(currentEmotion + '_' + 'name', payload) \n\nif (typeof name === 'undefined') {\n    name = currentEmotion\n    node.warn('Hmm we setting' + ' face1_' + currentEmotion)\n    flow.set(currentEmotion + '_' + 'name', name)\n}\n\nlet nameMSG = {topic: 'value', payload: name}\n\nlet leftEyeColour = flow.get(currentEmotion + '_' + 'l_eye_colour') || 'red'\nlet leftEyeColourMSG = {topic: 'value', payload: leftEyeColour}\n\nlet leftEyeCount = flow.get(currentEmotion + '_' + 'l_eye_count') || 0\nlet leftEyeCountMSG = {topic: 'value', payload: leftEyeCount}\n\nlet rightEyeColour = flow.get(currentEmotion + '_' + 'r_eye_colour') || 'red'\nlet rightEyeColourMSG = {topic: 'value', payload: rightEyeColour}\n\nlet rightEyeCount = flow.get(currentEmotion + '_' + 'r_eye_count') || 0\nlet rightEyeCountMSG = {topic: 'value', payload: rightEyeCount}\n\nlet leftEyebrowAngle = flow.get(currentEmotion + '_' + 'l_eyebrow_angle') || 0\nlet leftEyebrowAngleMSG = {topic: 'value', payload: leftEyebrowAngle}\n\nlet rightEyebrowAngle = flow.get(currentEmotion + '_' + 'r_eyebrow_angle') || 0\nlet rightEyebrowAngleMSG = {topic: 'value', payload: rightEyebrowAngle}\n\nlet mouthAngle = flow.get(currentEmotion + '_' + 'mouth_angle') || 0\nlet mouthAngleMSG = {topic: 'value', payload: mouthAngle}\n\n\nreturn[nameMSG, leftEyebrowAngleMSG, rightEyebrowAngleMSG, leftEyeColourMSG, leftEyeCountMSG, rightEyeColourMSG, rightEyeCountMSG, mouthAngleMSG];\n\n\n\n//flow.set('angry' + msg.topic, msg.payload)\n",
        "outputs": 8,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2600,
        "y": 420,
        "wires": [
            [
                "2199d7cb.e4a51"
            ],
            [
                "72dc02f.a8dabfc",
                "40d146812fb847ee"
            ],
            [
                "80f10bea.f6ce8",
                "deaa514f7948a203"
            ],
            [
                "e5f99c1a.b5b718"
            ],
            [
                "941432bc.c575a8",
                "2cce300e5f2b2f64"
            ],
            [
                "a9967124.678228"
            ],
            [
                "49e38e7c.b3f648",
                "c6eb54365cdbd299"
            ],
            [
                "7fdef730.a8afa8",
                "47ab21739dbee93f"
            ]
        ],
        "outputLabels": [
            "name",
            "l_eyebrow_angle",
            "r_eyebrow_angle",
            "l_eye_colour",
            "l_eye_count",
            "r_eye_colour",
            "r_eye_count",
            "mouth_angle"
        ]
    },
    {
        "id": "81082733.2956f8",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "getCurrentEmotion",
        "func": "let payload=flow.get('face1_currentEmotion') || 'face1_emotion1'\n\nreturn {topic: 'face1_currentEmotion', payload: payload};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2750,
        "y": 100,
        "wires": [
            [
                "fbd8f533.210b5"
            ]
        ]
    },
    {
        "id": "2110438.2574d3c",
        "type": "comment",
        "z": "52bac4d7.a2850c",
        "name": "Dynamic Menu for editing Emotions",
        "info": "",
        "x": 2660,
        "y": 60,
        "wires": []
    },
    {
        "id": "4edb6966.44714",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "",
        "func": "let topic = msg.topic;\nlet payload = msg.payload;\n\nlet currentEmotion = flow.get('face1_currentEmotion') || 'face1_emotion1'\n\nswitch (topic) {\n    case 'l_eyebrow_command':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n    case 'r_eyebrow_command':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n    case 'l_eye_command':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n    case 'r_eye_command':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n    case 'mouth_command':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n    case 'l_eye_speed':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n    case 'r_eye_speed':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n}\n// let p = flow.get(currentEmotion + '_' + topic + '_' + payload.toString())\n// return {topic: currentEmotion, payload: p}\n\n//flow.set('angry' + msg.topic, msg.payload)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3820,
        "y": 240,
        "wires": [
            [
                "57c71e36.9fe28"
            ]
        ]
    },
    {
        "id": "1ff39aba.cd51fd",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "updateCommandValues",
        "func": "let topic = msg.topic;\nlet payload = msg.payload;\n\nlet currentEmotion = payload\nflow.set('face1_currentEmotion', currentEmotion)\nvar name = ''\n\n\nlet LEBCommand = flow.get('face1_' + currentEmotion + '_' + 'l_eyebrow_command')\nlet LEBCommandMSG = {topic: 'value', payload: LEBCommand}\n\nlet REBCommand = flow.get('face1_' + currentEmotion + '_' + 'r_eyebrow_command')\nlet REBCommandMSG = {topic: 'value', payload: REBCommand}\n\nlet LECommand = flow.get('face1_' + currentEmotion + '_' + 'l_eye_command')\nlet LECommandMSG = {topic: 'value', payload: LECommand}\n\nlet RECommand = flow.get('face1_' + currentEmotion + '_' + 'r_eye_command')\nlet RECommandMSG = {topic: 'value', payload: RECommand}\n\nlet mouthCommand = flow.get('face1_' + currentEmotion + '_' + 'mouth_command')\nlet mouthCommandMSG = {topic: 'value', payload: mouthCommand}\n\n\nreturn[LEBCommandMSG, REBCommandMSG, LECommandMSG, RECommandMSG, mouthCommandMSG];\n\n\n\n//flow.set('angry' + msg.topic, msg.payload)\n",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3250,
        "y": 120,
        "wires": [
            [
                "e6a8576e.dda7b8"
            ],
            [
                "64dfb8b0.8f8cc8"
            ],
            [
                "71491ce0.17b5fc"
            ],
            [
                "59f0b046.9bee5"
            ],
            [
                "ad79d283.bb0d28"
            ]
        ],
        "outputLabels": [
            "use_l_eyebrow_command",
            "l_eyebrow_command",
            "use_r_eyebrow_command",
            "r_eyebrow_command",
            "use_l_eye_command"
        ]
    },
    {
        "id": "e6a8576e.dda7b8",
        "type": "ui_dropdown",
        "z": "52bac4d7.a2850c",
        "name": "Left Eyebrow Command",
        "label": "",
        "tooltip": "",
        "place": "Select command",
        "group": "e7ea26e6.3e9db",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "None",
                "value": "none",
                "type": "str"
            },
            {
                "label": "Wiggle",
                "value": "wiggle",
                "type": "str"
            },
            {
                "label": "Slow Wiggle",
                "value": "slow_wiggle",
                "type": "str"
            },
            {
                "label": "Fast Wiggle",
                "value": "fast_wiggle",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "l_eyebrow_command",
        "topicType": "str",
        "className": "",
        "x": 3550,
        "y": 60,
        "wires": [
            [
                "4edb6966.44714"
            ]
        ]
    },
    {
        "id": "64dfb8b0.8f8cc8",
        "type": "ui_dropdown",
        "z": "52bac4d7.a2850c",
        "name": "Right Eyebrow Command",
        "label": "",
        "tooltip": "",
        "place": "Select command",
        "group": "e7ea26e6.3e9db",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "None",
                "value": "none",
                "type": "str"
            },
            {
                "label": "Wiggle",
                "value": "wiggle",
                "type": "str"
            },
            {
                "label": "Slow Wiggle",
                "value": "slow_wiggle",
                "type": "str"
            },
            {
                "label": "Fast Wiggle",
                "value": "fast_wiggle",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "r_eyebrow_command",
        "topicType": "str",
        "className": "",
        "x": 3550,
        "y": 100,
        "wires": [
            [
                "4edb6966.44714"
            ]
        ]
    },
    {
        "id": "ad79d283.bb0d28",
        "type": "ui_dropdown",
        "z": "52bac4d7.a2850c",
        "name": "Mouth Command",
        "label": "",
        "tooltip": "",
        "place": "Select command",
        "group": "e7ea26e6.3e9db",
        "order": 29,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "None",
                "value": "none",
                "type": "str"
            },
            {
                "label": "Wiggle",
                "value": "wiggle",
                "type": "str"
            },
            {
                "label": "Slow Wiggle",
                "value": "slow_wiggle",
                "type": "str"
            },
            {
                "label": "Fast Wiggle",
                "value": "fast_wiggle",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "mouth_command",
        "topicType": "str",
        "className": "",
        "x": 3530,
        "y": 320,
        "wires": [
            [
                "4edb6966.44714"
            ]
        ]
    },
    {
        "id": "71491ce0.17b5fc",
        "type": "ui_dropdown",
        "z": "52bac4d7.a2850c",
        "name": "Left Eye Command",
        "label": "",
        "tooltip": "",
        "place": "Select command",
        "group": "e7ea26e6.3e9db",
        "order": 17,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "None",
                "value": "none",
                "type": "str"
            },
            {
                "label": "Breathe",
                "value": "breathe",
                "type": "str"
            },
            {
                "label": "Pulse",
                "value": "pulse",
                "type": "str"
            },
            {
                "label": "Blink",
                "value": "blink",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "l_eye_command",
        "topicType": "str",
        "className": "",
        "x": 3530,
        "y": 140,
        "wires": [
            [
                "4edb6966.44714"
            ]
        ]
    },
    {
        "id": "59f0b046.9bee5",
        "type": "ui_dropdown",
        "z": "52bac4d7.a2850c",
        "name": "Right Eye Command",
        "label": "",
        "tooltip": "",
        "place": "Select command",
        "group": "e7ea26e6.3e9db",
        "order": 24,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "None",
                "value": "none",
                "type": "str"
            },
            {
                "label": "Breathe",
                "value": "breathe",
                "type": "str"
            },
            {
                "label": "Pulse",
                "value": "pulse",
                "type": "str"
            },
            {
                "label": "Blink",
                "value": "blink",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "r_eye_command",
        "topicType": "str",
        "className": "",
        "x": 3540,
        "y": 220,
        "wires": [
            [
                "4edb6966.44714"
            ]
        ]
    },
    {
        "id": "2a01e97b.7fa636",
        "type": "ui_numeric",
        "z": "52bac4d7.a2850c",
        "name": "Left Eye Speed",
        "label": "Speed",
        "tooltip": "",
        "group": "e7ea26e6.3e9db",
        "order": 18,
        "width": 0,
        "height": 0,
        "wrap": true,
        "passthru": true,
        "topic": "l_eye_speed",
        "topicType": "str",
        "format": "{{value}}",
        "min": "50",
        "max": "200",
        "step": "10",
        "className": "",
        "x": 3520,
        "y": 180,
        "wires": [
            [
                "4edb6966.44714"
            ]
        ]
    },
    {
        "id": "edea6ec7.97f8e8",
        "type": "ui_numeric",
        "z": "52bac4d7.a2850c",
        "name": "Right Eye Speed",
        "label": "Speed",
        "tooltip": "",
        "group": "e7ea26e6.3e9db",
        "order": 25,
        "width": 0,
        "height": 0,
        "wrap": true,
        "passthru": true,
        "topic": "r_eye_speed",
        "topicType": "str",
        "format": "{{value}}",
        "min": "50",
        "max": "200",
        "step": "10",
        "className": "",
        "x": 3530,
        "y": 260,
        "wires": [
            [
                "4edb6966.44714"
            ]
        ]
    },
    {
        "id": "47f2b36d.fb58c4",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "Vote Setup UI Handler",
        "func": "\nswitch (msg.topic) {\n    case 'face1_reaction1':\n        node.warn(['setting emotion for', msg.topic]);\n        node.warn(['emotion chosen is', msg.payload]);\n        flow.set(msg.topic, msg.payload);\n        break\n    case 'face1_reaction2':\n        node.warn(['setting emotion for', msg.topic]);\n        node.warn(['emotion chosen is', msg.payload]);\n        flow.set(msg.topic, msg.payload);\n        break\n    case 'face1_reaction3':\n        node.warn(['setting emotion for', msg.topic]);\n        node.warn(['emotion chosen is', msg.payload]);\n        flow.set(msg.topic, msg.payload);\n        break\n    case 'face1_reaction4':\n        node.warn(['setting emotion for', msg.topic]);\n        node.warn(['emotion chosen is', msg.payload]);\n        flow.set(msg.topic, msg.payload);\n        break\n    case 'face1_reaction5':\n        node.warn(['setting emotion for', msg.topic]);\n        node.warn(['emotion chosen is', msg.payload]);\n        flow.set(msg.topic, msg.payload);\n        break\n    case 'face1_poll_threshold':\n        flow.set('poll_threshold', msg.payload);\n        break\n    case 'face1_reaction2_threshold':\n        flow.set(msg.topic, msg.payload);\n        break\n    case 'face1_question':\n        flow.set(msg.topic, msg.payload);\n        break\n    case 'face1_displayOnClose':\n        flow.set(msg.topic, msg.payload)\n        break\n    case 'face1_votingIsLive':\n        flow.set(msg.topic, msg.payload);\n        if (msg.payload === false) {\n            let autoResult = flow.get('face1_displayOnClose')\n            if (autoResult === true) {\n                let ans1 = flow.get('face1_answer1_count');\n                let ans2 = flow.get('face1_answer2_count');\n                let ans3 = flow.get('face1_answer3_count');\n                let ans4 = flow.get('face1_answer4_count');\n                let ans5 = flow.get('face1_answer5_count');\n\n                let answers = [ans1, ans2, ans3, ans4, ans5];\n\n                var max = answers[0];\n                var maxIndex = 0;\n\n                for (var i = 1; i < answers.length; i++) {\n                    if (answers[i] > max) {\n                        maxIndex = i;\n                        max = answers[i];\n                    }\n                }\n                switch (maxIndex) {\n                    case 0:\n                        let react1 = flow.get('face1_reaction1')\n                        return { topic: 'face1', payload: react1 }\n                    case 1:\n                        let react2 = flow.get('face1_reaction2')\n                        return { topic: 'face1', payload: react2 }\n                    case 2:\n                        let react3 = flow.get('face1_reaction3')\n                        return { topic: 'face1', payload: react3 }\n                    case 3:\n                        let react4 = flow.get('face1_reaction4')\n                        return { topic: 'face1', payload: react4 }\n                    case 4:\n                        let react5 = flow.get('face1_reaction5')\n                        return { topic: 'face1', payload: react5 }\n                    default:\n                        return\n                }\n            }\n        }\n        break\n    case 'face1_resetPoll':\n        flow.set('face1_answer1_count', 0);\n        flow.set('face1_answer2_count', 0);\n        flow.set('face1_answer3_count', 0);\n        flow.set('face1_answer4_count', 0);\n        flow.set('face1_answer5_count', 0);\n        return {topic: msg.topic, payload: flow.get('answer1_count')} \n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3660,
        "y": 1020,
        "wires": [
            [
                "8f106d41.e3f38",
                "e6174819.4c8868"
            ]
        ]
    },
    {
        "id": "fb8ab9cd.061d7",
        "type": "ui_button",
        "z": "52bac4d7.a2850c",
        "name": "Answer 1 Button",
        "group": "fae06d00.7ce458",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Answer 1",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "answer1",
        "payloadType": "str",
        "topic": "answer1",
        "topicType": "str",
        "x": 3930,
        "y": 660,
        "wires": [
            [
                "44920056.56b72"
            ]
        ]
    },
    {
        "id": "1f6e178b.ba60f",
        "type": "ui_button",
        "z": "52bac4d7.a2850c",
        "name": "Answer 2 Button",
        "group": "fae06d00.7ce458",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Answer 2",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "answer2",
        "payloadType": "str",
        "topic": "answer2",
        "topicType": "str",
        "x": 3930,
        "y": 700,
        "wires": [
            [
                "44920056.56b72"
            ]
        ]
    },
    {
        "id": "44920056.56b72",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "Voting UI Handler",
        "func": "let votingIsLive1 = flow.get('face1_votingIsLive');\nlet votingIsLive2 = flow.get('face2_votingIsLive');\nlet message = msg.payload.something;\nnode.warn('the message coming in is ' + message);\n\nif (votingIsLive1 === true) {\n    var count = flow.get('face1_' + message + '_count') || 0;\n    count = count + 1;\n    flow.set('face1_' + message + '_count', count);\n} \n\nif (votingIsLive2 === true) {\n    var count2 = flow.get('face2_' + message + '_count') || 0;\n    count2 = count2 + 1;\n    flow.set('face2_' + message + '_count', count2);\n} \nreturn {topic: 'face1_vote', payload: 'count ' + count + ' ' + message + ' voting ' + votingIsLive1}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4150,
        "y": 680,
        "wires": [
            [
                "57c71e36.9fe28",
                "8f106d41.e3f38",
                "b068871a.f1e758",
                "16f55a3a.8b061e",
                "d18db7f3826a6cfe",
                "84e5a4c2.baba28"
            ]
        ]
    },
    {
        "id": "84e5a4c2.baba28",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "Calculate Poll Emotion ",
        "func": "let ans1 = flow.get('face1_answer1_count');\nlet ans2 = flow.get('face1_answer2_count');\nlet ans3 = flow.get('face1_answer3_count');\nlet ans4 = flow.get('face1_answer4_count');\nlet ans5 = flow.get('face1_answer5_count');\n\nlet threshold = flow.get('face1_poll_threshold') || 50;\n\nlet answers = [ans1, ans2, ans3, ans4, ans5];\n\nvar max = answers[0];\nvar maxIndex = 0;\n\nfor (var i = 1; i < answers.length; i++) {\n    if (answers[i] > max) {\n        maxIndex = i;\n        max = answers[i];\n    }\n}\n\n// let result = Math.round((ans1 / (ans1 + ans2) * 100));\nswitch (maxIndex) {\n    case 0:\n        let react1 = flow.get('face1_reaction1')\n        return { topic: 'face1', payload: react1 }\n        break;\n    case 1:\n        let react2 = flow.get('face1_reaction2')\n        return { topic: 'face1', payload: react2 }\n        break;\n    case 2:\n        let react3 = flow.get('face1_reaction3')\n        return { topic: 'face1', payload: react3 }\n        break;\n    case 3:\n        let react4 = flow.get('face1_reaction4')\n        return { topic: 'face1', payload: react4 }\n        break;\n    case 4:\n        let react5 = flow.get('face1_reaction5')\n        return { topic: 'face1', payload: react5 }\n        break;\n    default:\n        break\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4080,
        "y": 1180,
        "wires": [
            [
                "57c71e36.9fe28",
                "e6174819.4c8868",
                "ec0be043.4a1a"
            ]
        ]
    },
    {
        "id": "5d1d33f8.4286fc",
        "type": "ui_button",
        "z": "52bac4d7.a2850c",
        "name": "",
        "group": "ca2272c3.e8396",
        "order": 1,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "Face Tracker",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Face-Tracker",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 3930,
        "y": 1500,
        "wires": [
            [
                "62583e1b.dfccb"
            ]
        ]
    },
    {
        "id": "367537c6.6ec97",
        "type": "ui_template",
        "z": "52bac4d7.a2850c",
        "group": "ca2272c3.e8396",
        "name": "window redirect",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<script>\n(function(scope) {\n    scope.$watch('msg.payload', function(data) {\n        if (data == \"Face-Tracker\") {\n          //window.open(\"https://www.nodered.org\");\n          window.location.href = \"https://192.168.4.1/face-tracker/\";\n        } \n        if (data == \"Weather\") {\n          //window.open(\"https://github.com/node-red\");\n          window.location.href = \"https://192.168.4.1/face-tracker/dataset.html \";\n        } \n    });\n})(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 4300,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "e580aeb6.8d6028",
        "type": "ui_button",
        "z": "52bac4d7.a2850c",
        "name": "",
        "group": "ca2272c3.e8396",
        "order": 2,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "Weather Data",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Weather",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 3940,
        "y": 1540,
        "wires": [
            [
                "62583e1b.dfccb"
            ]
        ]
    },
    {
        "id": "62583e1b.dfccb",
        "type": "trigger",
        "z": "52bac4d7.a2850c",
        "name": "reset msg",
        "op1": "",
        "op2": "empty",
        "op1type": "pay",
        "op2type": "str",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 4120,
        "y": 1520,
        "wires": [
            [
                "367537c6.6ec97"
            ]
        ]
    },
    {
        "id": "7f83fb13.3d1444",
        "type": "ui_gauge",
        "z": "52bac4d7.a2850c",
        "name": "Face 1 Results Ans1",
        "group": "a4f664876522e645",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "{{msg.topic}}",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#c0c0c0",
            "#aaaaaa",
            "#444444"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 4360,
        "y": 960,
        "wires": []
    },
    {
        "id": "8f106d41.e3f38",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "Calculate Guage Value",
        "func": "let ans1 = flow.get('face1_answer1_count') || 0;\nlet ans2 = flow.get('face1_answer2_count') || 0;\nlet ans3 = flow.get('face1_answer3_count') || 0;\nlet ans4 = flow.get('face1_answer4_count') || 0;\nlet ans5 = flow.get('face1_answer5_count') || 0;\n\nlet threshold = flow.get('face1_poll_threshold') || 50;\n\nlet answers = [ans1, ans2, ans3, ans4, ans5];\n\nvar max = answers[0];\nvar maxIndex = 0;\n\nfor (var i = 1; i < answers.length; i++) {\n    if (answers[i] > max) {\n        maxIndex = i;\n        max = answers[i];\n    }\n}\n\nlet total = ans1 + ans2 + ans3 + ans4 + ans5;\nlet result1 = Math.round((answers[0] / total) * 100)\nlet result2 = Math.round((answers[1] / total) * 100)\nlet result3 = Math.round((answers[2] / total) * 100)\nlet result4 = Math.round((answers[3] / total) * 100)\nlet result5 = Math.round((answers[4] / total) * 100)\n\nreturn [{ topic: '1', payload: result1 }, { topic: '2', payload: result2 }, { topic: '3', payload: result3 }, { topic: '4', payload: result4 }, { topic: '5', payload: result5}]",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3980,
        "y": 1020,
        "wires": [
            [
                "7f83fb13.3d1444"
            ],
            [
                "20468798d48318e7"
            ],
            [
                "ce926b547f729098"
            ],
            [
                "c8caaf7b8d8b95fe"
            ],
            [
                "d94dceb39616ad8c"
            ]
        ],
        "outputLabels": [
            "Answer 1",
            "Answer 2",
            "Answer 3",
            "Answer 4",
            "Answer 5"
        ]
    },
    {
        "id": "35c102c9.7fdfc6",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "",
        "func": "\nreturn {topic: 'message topic', payload: 'message'};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3930,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "896f3567.0b49d",
        "type": "inject",
        "z": "52bac4d7.a2850c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3740,
        "y": 480,
        "wires": [
            [
                "35c102c9.7fdfc6"
            ]
        ]
    },
    {
        "id": "ec0be043.4a1a",
        "type": "ui_text",
        "z": "52bac4d7.a2850c",
        "group": "98582f48.ad9928",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "result",
        "label": "Result:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 4190,
        "y": 920,
        "wires": []
    },
    {
        "id": "bfa19971.d373b",
        "type": "ui_dropdown",
        "z": "52bac4d7.a2850c",
        "name": "Face 1 Datasource",
        "label": "Data Source",
        "tooltip": "",
        "place": "Select option",
        "group": "96bb7209.4bc5c",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Emotion",
                "value": "emotion",
                "type": "str"
            },
            {
                "label": "Dataset",
                "value": "dataset",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "face1_datasource",
        "topicType": "str",
        "className": "",
        "x": 4530,
        "y": 580,
        "wires": [
            [
                "f1399d5d.ff63f8"
            ]
        ]
    },
    {
        "id": "2fab1162.94dbc6",
        "type": "ui_dropdown",
        "z": "52bac4d7.a2850c",
        "name": "Face 1 Processing",
        "label": "Processing",
        "tooltip": "",
        "place": "Select option",
        "group": "96bb7209.4bc5c",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Continuous",
                "value": "continuous",
                "type": "str"
            },
            {
                "label": "Discrete",
                "value": "discrete",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "face1_processing",
        "topicType": "str",
        "className": "",
        "x": 4530,
        "y": 620,
        "wires": [
            [
                "f1399d5d.ff63f8"
            ]
        ]
    },
    {
        "id": "48d569ad.2ca2f",
        "type": "ui_numeric",
        "z": "52bac4d7.a2850c",
        "name": "Face 1 Phone control",
        "label": "Phone",
        "tooltip": "Phone controlling face 1",
        "group": "96bb7209.4bc5c",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "face1_phone",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1",
        "max": "16",
        "step": 1,
        "className": "",
        "x": 4540,
        "y": 660,
        "wires": [
            [
                "f1399d5d.ff63f8"
            ]
        ]
    },
    {
        "id": "ff513c42.bae638",
        "type": "ui_dropdown",
        "z": "52bac4d7.a2850c",
        "name": "Face 2 Datasource",
        "label": "Data Source",
        "tooltip": "",
        "place": "Select option",
        "group": "ce2d38b7.02b4f",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Emotion",
                "value": "emotion",
                "type": "str"
            },
            {
                "label": "Dataset",
                "value": "dataset",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "face2_datasource",
        "topicType": "str",
        "className": "",
        "x": 4530,
        "y": 740,
        "wires": [
            [
                "f1399d5d.ff63f8"
            ]
        ]
    },
    {
        "id": "af19fe43.c74b08",
        "type": "ui_dropdown",
        "z": "52bac4d7.a2850c",
        "name": "Face 2 Processing",
        "label": "Processing",
        "tooltip": "",
        "place": "Select option",
        "group": "ce2d38b7.02b4f",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Continuous",
                "value": "continuous",
                "type": "str"
            },
            {
                "label": "Discrete",
                "value": "discrete",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "face2_processing",
        "topicType": "str",
        "className": "",
        "x": 4530,
        "y": 780,
        "wires": [
            [
                "f1399d5d.ff63f8"
            ]
        ]
    },
    {
        "id": "a2b96468.e8b148",
        "type": "ui_numeric",
        "z": "52bac4d7.a2850c",
        "name": "Face 2 Phone controll",
        "label": "Phone",
        "tooltip": "Phone controlling face 2",
        "group": "ce2d38b7.02b4f",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "face2_phone",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1",
        "max": "16",
        "step": 1,
        "className": "",
        "x": 4540,
        "y": 820,
        "wires": [
            [
                "f1399d5d.ff63f8"
            ]
        ]
    },
    {
        "id": "f1399d5d.ff63f8",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "",
        "func": "\nswitch (msg.topic) {\n    case 'face1_datasource':\n        break\n    case 'face1_processing':\n        break\n    case 'face1_phone':\n        break\n    case 'face2_datasource':\n        break\n    case 'face2_processing':\n        break\n    case 'face2_phone':\n        break\n}\n\nnode.warn('Setting ' + msg.topic + ' as ' + msg.payload);\nflow.set(msg.topic, msg.payload);\n\nlet dataSource1 = flow.get('face1_datasource') || 'emotion';\nlet processing1 = flow.get('face1_processing') || false;\nlet phone1 = flow.get('face1_phone') || 1;\n\nlet dataSource2 = flow.get('face2_datasource') || 'emotion';\nlet processing2 = flow.get('face2_processing') || false;\nlet phone2 = flow.get('face2_phone') || 1;\nlet mappings = {\"bob\":{\"feature\":\"left eyebrow\",\"type\":\"servo\",\"face\":1,\"phone\":phone1},\"joy\":{\"feature\":\"right eyebrow\",\"type\":\"servo\",\"face\":phone1,\"phone\":\"2\"},\"eve\":{\"feature\":\"left eye\",\"type\":\"pixel\",\"face\":phone1,\"phone\":\"2\"},\"fin\":{\"feature\":\"right eye\",\"type\":\"pixel\",\"face\":phone1,\"phone\":\"2\"},\"caz\":{\"feature\":\"mouth\",\"type\":\"servo\",\"face\":phone1,\"phone\":phone2},\"tim\":{\"feature\":\"left eyebrow\",\"type\":\"servo\",\"face\":2,\"phone\":phone2},\"jim\":{\"feature\":\"right eyebrow\",\"type\":\"servo\",\"face\":2,\"phone\":phone2},\"ada\":{\"feature\":\"left eye\",\"type\":\"pixel\",\"face\":2,\"phone\":phone2},\"ben\":{\"feature\":\"right eye\",\"type\":\"pixel\",\"face\":2,\"phone\":phone2},\"lou\":{\"feature\":\"mouth\",\"type\":\"servo\",\"face\":2,\"phone\":phone2}}\nlet messageToSend = {\n                'topic': 'admin_change',\n                'mappings': mappings,\n                'data_source': [dataSource1, dataSource2],\n                'continuous': [processing1, processing2],\n                'face_features': [false, false]\n            };\nlet data = {\n        face1: null,\n        face_phones:[{\n            'whole': phone1,\n            'left eyebrow': phone1,\n            'right eyebrow': phone1,\n            'left eye': phone1,\n            'right eye': phone1,\n            'mouth': phone1,\n            },\n            {\n            'whole': phone2,\n            'left eyebrow': phone2,\n            'right eyebrow': phone2,\n            'left eye': phone2,\n            'right eye': phone2,\n            'mouth': phone2,\n            }\n        ],\n        data: [dataSource1, dataSource2],\n        data_options: [\n          { value: 'emotion', text: 'Emotion' },\n          { value: 'dataset', text: 'Dataset' }\n        ],\n        continuous: [processing1, processing2],\n        processing_options: [\n          { value: true, text: 'Continuous' },\n          { value: false, text: 'Discrete' }\n        ],\n        face_features: [false, false],\n        socketConnectedState : false,\n        serverTimeOffset     : '[unknown]',\n        msgRecvd    : '[Nothing]',\n        msgsReceived: 0,\n        msgCtrl     : '[Nothing]',\n        msgsControl : 0,\n        msgSent     : '[Nothing]',\n        msgsSent    : 0,\n        msgCtrlSent : '[Nothing]',\n        msgsCtrlSent: 0,\n    }\n    \n    \n\nreturn messageToSend;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4800,
        "y": 700,
        "wires": [
            [
                "e1cb618a.ce3ed",
                "c1f915d0.a25d68"
            ]
        ]
    },
    {
        "id": "e1cb618a.ce3ed",
        "type": "debug",
        "z": "52bac4d7.a2850c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4830,
        "y": 1000,
        "wires": []
    },
    {
        "id": "a4e9303d.5c0bb8",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "",
        "func": "let topic = msg.topic;\nlet payload = msg.payload;\n\nflow.set('selectedFace', payload)\nreturn {topic: 'selectedFace', payload: payload}\n\n//flow.set('angry' + msg.topic, msg.payload)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2220,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "8665d7ec.807f7",
        "type": "ui_button",
        "z": "52bac4d7.a2850c",
        "name": "Emotion 1",
        "group": "c522b7fa.a4d9d",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "{{msg.payload}}",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "face2_emotion1",
        "payloadType": "str",
        "topic": "face2",
        "topicType": "str",
        "x": 1910,
        "y": 420,
        "wires": [
            [
                "e6174819.4c8868"
            ]
        ]
    },
    {
        "id": "2694078d.bd22c8",
        "type": "ui_button",
        "z": "52bac4d7.a2850c",
        "name": "Emotion 2",
        "group": "c522b7fa.a4d9d",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "{{msg.payload}}",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "face2_emotion2",
        "payloadType": "str",
        "topic": "face2",
        "topicType": "str",
        "x": 1910,
        "y": 460,
        "wires": [
            [
                "e6174819.4c8868"
            ]
        ]
    },
    {
        "id": "31a8f18f.a3765e",
        "type": "ui_button",
        "z": "52bac4d7.a2850c",
        "name": "Emotion 3",
        "group": "c522b7fa.a4d9d",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "{{msg.payload}}",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "face2_emotion3",
        "payloadType": "str",
        "topic": "face2",
        "topicType": "str",
        "x": 1910,
        "y": 500,
        "wires": [
            [
                "e6174819.4c8868"
            ]
        ]
    },
    {
        "id": "6a0ed347.1a0d64",
        "type": "ui_button",
        "z": "52bac4d7.a2850c",
        "name": "Emotion 4",
        "group": "c522b7fa.a4d9d",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "{{msg.payload}}",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "face2_emotion4",
        "payloadType": "str",
        "topic": "face2",
        "topicType": "str",
        "x": 1910,
        "y": 540,
        "wires": [
            [
                "e6174819.4c8868"
            ]
        ]
    },
    {
        "id": "609ff4e7.43b2cc",
        "type": "ui_button",
        "z": "52bac4d7.a2850c",
        "name": "Emotion 5",
        "group": "c522b7fa.a4d9d",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "{{msg.payload}}",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "face2_emotion5",
        "payloadType": "str",
        "topic": "face2",
        "topicType": "str",
        "x": 1910,
        "y": 580,
        "wires": [
            [
                "e6174819.4c8868"
            ]
        ]
    },
    {
        "id": "6cb8fa94.ecf174",
        "type": "ui_button",
        "z": "52bac4d7.a2850c",
        "name": "Emotion 6",
        "group": "c522b7fa.a4d9d",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Rest",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "face2_emotion6",
        "payloadType": "str",
        "topic": "face2",
        "topicType": "str",
        "x": 1910,
        "y": 620,
        "wires": [
            [
                "e6174819.4c8868"
            ]
        ]
    },
    {
        "id": "c5c55df5.6affe",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "",
        "func": "let name=flow.get('face2_emotion5_name') || 'Emotion 5'\n\nreturn {topic: 'title', payload: name};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1720,
        "y": 580,
        "wires": [
            [
                "609ff4e7.43b2cc"
            ]
        ]
    },
    {
        "id": "4232b283.0be034",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "",
        "func": "let name=flow.get('face2_emotion4_name') || 'Emotion 4'\n\nreturn {topic: 'title', payload: name};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1720,
        "y": 540,
        "wires": [
            [
                "6a0ed347.1a0d64"
            ]
        ]
    },
    {
        "id": "766621dc.33e5",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "",
        "func": "let name=flow.get('face2_emotion3_name') || 'Emotion 3'\n\nreturn {topic: 'title', payload: name};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1720,
        "y": 500,
        "wires": [
            [
                "31a8f18f.a3765e"
            ]
        ]
    },
    {
        "id": "ed6c6535.4375",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "",
        "func": "let name=flow.get('face2_emotion2_name') || 'Emotion 2'\n\nreturn {topic: 'title', payload: name};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1720,
        "y": 460,
        "wires": [
            [
                "2694078d.bd22c8"
            ]
        ]
    },
    {
        "id": "65a6b14b.f9fde",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "",
        "func": "let name=flow.get('face2_emotion1_name') || 'Emotion 1'\n\nreturn {topic: 'title', payload: name};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1720,
        "y": 420,
        "wires": [
            [
                "8665d7ec.807f7"
            ]
        ]
    },
    {
        "id": "a449e46a.59407",
        "type": "ui_text_input",
        "z": "52bac4d7.a2850c",
        "name": "",
        "label": "Emotion Name",
        "tooltip": "",
        "group": "7ed8a98b.48af38",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "name",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2740,
        "y": 1000,
        "wires": [
            [
                "7d604614.6ad2d8"
            ]
        ]
    },
    {
        "id": "2d151623.336302",
        "type": "ui_text",
        "z": "52bac4d7.a2850c",
        "group": "7ed8a98b.48af38",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Set the angle for the eyebrows",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 2790,
        "y": 1040,
        "wires": []
    },
    {
        "id": "28a64b46.2c738c",
        "type": "ui_slider",
        "z": "52bac4d7.a2850c",
        "d": true,
        "name": "Left Eyebrow Angle",
        "label": "Left Angle",
        "tooltip": "",
        "group": "7ed8a98b.48af38",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "l_eyebrow_angle",
        "topicType": "str",
        "min": "1",
        "max": "180",
        "step": 1,
        "className": "",
        "x": 2750,
        "y": 1080,
        "wires": [
            [
                "7d604614.6ad2d8"
            ]
        ]
    },
    {
        "id": "293a7748.241348",
        "type": "ui_slider",
        "z": "52bac4d7.a2850c",
        "d": true,
        "name": "Right Eyebrow Angle",
        "label": "Right Angle",
        "tooltip": "block: joy",
        "group": "7ed8a98b.48af38",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "r_eyebrow_angle",
        "topicType": "str",
        "min": "1",
        "max": "180",
        "step": 1,
        "className": "",
        "x": 2760,
        "y": 1180,
        "wires": [
            [
                "7d604614.6ad2d8"
            ]
        ]
    },
    {
        "id": "a302efb2.7a68a",
        "type": "ui_text",
        "z": "52bac4d7.a2850c",
        "group": "7ed8a98b.48af38",
        "order": 12,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Set the colour and light count for Left Eye",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 2820,
        "y": 1260,
        "wires": []
    },
    {
        "id": "48955bb8.9960c4",
        "type": "ui_dropdown",
        "z": "52bac4d7.a2850c",
        "name": "Left Eye Colour",
        "label": "LED Colour",
        "tooltip": "Sets left eye colour",
        "place": "Select option",
        "group": "7ed8a98b.48af38",
        "order": 13,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "White",
                "value": "white",
                "type": "str"
            },
            {
                "label": "Red",
                "value": "red",
                "type": "str"
            },
            {
                "label": "Orange",
                "value": "orange",
                "type": "str"
            },
            {
                "label": "Yellow",
                "value": "yellow",
                "type": "str"
            },
            {
                "label": "Green",
                "value": "green",
                "type": "str"
            },
            {
                "label": "Blue",
                "value": "blue",
                "type": "str"
            },
            {
                "label": "Pink",
                "value": "pink",
                "type": "str"
            },
            {
                "label": "Purple",
                "value": "purple",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "l_eye_colour",
        "topicType": "str",
        "className": "",
        "x": 2740,
        "y": 1300,
        "wires": [
            [
                "7d604614.6ad2d8"
            ]
        ]
    },
    {
        "id": "ff683a66.13a99",
        "type": "ui_slider",
        "z": "52bac4d7.a2850c",
        "d": true,
        "name": "Left Eye Count",
        "label": "LED Count",
        "tooltip": "",
        "group": "7ed8a98b.48af38",
        "order": 14,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "l_eye_count",
        "topicType": "str",
        "min": "1",
        "max": "12",
        "step": 1,
        "className": "",
        "x": 2740,
        "y": 1340,
        "wires": [
            [
                "7d604614.6ad2d8"
            ]
        ]
    },
    {
        "id": "9322c2aa.2404e",
        "type": "ui_text",
        "z": "52bac4d7.a2850c",
        "group": "7ed8a98b.48af38",
        "order": 18,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Set the colour and light count for Right Eye",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 2830,
        "y": 1420,
        "wires": []
    },
    {
        "id": "e0736e17.1c29b",
        "type": "ui_dropdown",
        "z": "52bac4d7.a2850c",
        "name": "Right Eye Colour",
        "label": "LED Colour",
        "tooltip": "Sets right eye colour",
        "place": "Select option",
        "group": "7ed8a98b.48af38",
        "order": 19,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "White",
                "value": "white",
                "type": "str"
            },
            {
                "label": "Red",
                "value": "red",
                "type": "str"
            },
            {
                "label": "Orange",
                "value": "orange",
                "type": "str"
            },
            {
                "label": "Yellow",
                "value": "yellow",
                "type": "str"
            },
            {
                "label": "Green",
                "value": "green",
                "type": "str"
            },
            {
                "label": "Blue",
                "value": "blue",
                "type": "str"
            },
            {
                "label": "Pink",
                "value": "pink",
                "type": "str"
            },
            {
                "label": "Purple",
                "value": "purple",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "r_eye_colour",
        "topicType": "str",
        "className": "",
        "x": 2750,
        "y": 1460,
        "wires": [
            [
                "7d604614.6ad2d8"
            ]
        ]
    },
    {
        "id": "8942363c.388718",
        "type": "ui_slider",
        "z": "52bac4d7.a2850c",
        "d": true,
        "name": "Right Eye Count",
        "label": "LED Count",
        "tooltip": "",
        "group": "7ed8a98b.48af38",
        "order": 20,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "r_eye_count",
        "topicType": "str",
        "min": "1",
        "max": "12",
        "step": 1,
        "className": "",
        "x": 2740,
        "y": 1500,
        "wires": [
            [
                "7d604614.6ad2d8"
            ]
        ]
    },
    {
        "id": "f66b2def.9df1c8",
        "type": "ui_text",
        "z": "52bac4d7.a2850c",
        "group": "7ed8a98b.48af38",
        "order": 24,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Set the angle for the mouth",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 2780,
        "y": 1600,
        "wires": []
    },
    {
        "id": "cc3cbcb3.f9bbe",
        "type": "ui_slider",
        "z": "52bac4d7.a2850c",
        "d": true,
        "name": "Mouth Angle",
        "label": "Angle",
        "tooltip": "",
        "group": "7ed8a98b.48af38",
        "order": 25,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "mouth_angle",
        "topicType": "str",
        "min": "1",
        "max": "180",
        "step": 1,
        "className": "",
        "x": 2730,
        "y": 1640,
        "wires": [
            [
                "7d604614.6ad2d8"
            ]
        ]
    },
    {
        "id": "bd1d8942.f514c8",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "updateEmotionValuesFace2",
        "func": "let topic = msg.topic;\nlet payload = msg.payload;\n\nlet currentEmotion = payload\nflow.set('face2_currentEmotion', currentEmotion)\nvar name = ''\n\nname = flow.get(currentEmotion + '_' + 'name', payload)\nnode.warn('face is ' + name )\nif (typeof name === 'undefined') {\n    name = currentEmotion\n    flow.set(currentEmotion + '_' + 'name', name)\n    node.warn('setting name to ' + name)\n}\n\nlet nameMSG = {topic: 'value', payload: name}\n\nlet leftEyeColour = flow.get(currentEmotion + '_' + 'l_eye_colour') || 'red'\nlet leftEyeColourMSG = {topic: 'value', payload: leftEyeColour}\nnode.warn(\"Face two left eye colour is \" + leftEyeColour);\nlet leftEyeCount = flow.get(currentEmotion + '_' + 'l_eye_count') || 0\nlet leftEyeCountMSG = {topic: 'value', payload: leftEyeCount}\n\nlet rightEyeColour = flow.get(currentEmotion + '_' + 'r_eye_colour') || 'red'\nlet rightEyeColourMSG = {topic: 'value', payload: rightEyeColour}\n\nlet rightEyeCount = flow.get(currentEmotion + '_' + 'r_eye_count') || 0\nlet rightEyeCountMSG = {topic: 'value', payload: rightEyeCount}\n\nlet leftEyebrowAngle = flow.get(currentEmotion + '_' + 'l_eyebrow_angle') || 0\nlet leftEyebrowAngleMSG = {topic: 'value', payload: leftEyebrowAngle}\n\nlet rightEyebrowAngle = flow.get(currentEmotion + '_' + 'r_eyebrow_angle') || 0\nlet rightEyebrowAngleMSG = {topic: 'value', payload: rightEyebrowAngle}\n\nlet mouthAngle = flow.get(currentEmotion + '_' + 'mouth_angle') || 0\nlet mouthAngleMSG = {topic: 'value', payload: mouthAngle}\n\n\nreturn[nameMSG, leftEyebrowAngleMSG, rightEyebrowAngleMSG, leftEyeColourMSG, leftEyeCountMSG, rightEyeColourMSG, rightEyeCountMSG, mouthAngleMSG];\n\n\n\n//flow.set('angry' + msg.topic, msg.payload)\n",
        "outputs": 8,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2400,
        "y": 1240,
        "wires": [
            [
                "a449e46a.59407"
            ],
            [
                "28a64b46.2c738c",
                "5595cd853ce7b17a"
            ],
            [
                "293a7748.241348",
                "7ea0bc1a0b943c89"
            ],
            [
                "48955bb8.9960c4"
            ],
            [
                "ff683a66.13a99",
                "6717c7efdc2aba98"
            ],
            [
                "e0736e17.1c29b"
            ],
            [
                "8942363c.388718",
                "f7a849fae6c89b5f"
            ],
            [
                "cc3cbcb3.f9bbe",
                "d9f450264f7769a6"
            ]
        ],
        "outputLabels": [
            "name",
            "l_eyebrow_angle",
            "r_eyebrow_angle",
            "l_eye_colour",
            "l_eye_count",
            "r_eye_colour",
            "r_eye_count",
            "mouth_angle"
        ]
    },
    {
        "id": "7d604614.6ad2d8",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "Face 2",
        "func": "let topic = msg.topic;\nlet payload = msg.payload;\n\nlet currentEmotion = flow.get('face2_' + 'currentEmotion') || 'face2_emotion1'\nnode.warn(\"Current F2 emotion is \" + currentEmotion);\n\nswitch (topic) {\n    case 'name':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n    case 'l_eye_colour':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n    case 'l_eye_count':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n    case 'r_eye_colour':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n    case 'r_eye_count':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n    case 'l_eyebrow_angle':\n        flow.set(currentEmotion + '_' + 'l_eyebrow_angle', payload)\n        break\n    case 'r_eyebrow_angle':\n        flow.set(currentEmotion + '_' + topic, msg.payload)\n        break\n    case 'mouth_angle':\n        flow.set(currentEmotion + '_' + topic, msg.payload)\n        break\n    case 'l_eyebrow_command':\n        break\n    case 'r_eyebrow_command':\n        break\n    case 'l_eye_command':\n        break\n    case 'r_eye_command':\n        break\n    case 'mouth':\n        break\n}\n\nreturn {topic: currentEmotion,payload: topic + '_' + payload}\n\n//flow.set('angry' + msg.topic, msg.payload)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3130,
        "y": 1320,
        "wires": [
            [
                "134eea44.ec0426"
            ]
        ]
    },
    {
        "id": "eb2671fc.1b3088",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "getCurrentEmotion",
        "func": "let payload = flow.get('face2_currentEmotion') || 'face2_emotion1'\n\n// flow.set('emotion6_l_eye_colour', 'red')\n// flow.set('emotion6_l_eye_count', 0)\n// flow.set('emotion6_r_eye_colour', 'red')\n// flow.set('emotion6_r_eye_count', 0)\n// flow.set('emotion6_l_eyebrow_angle', 0)\n// flow.set('emotion6_r_eyebrow_angle', 0)\n// flow.set('emotion6_mouth_angle', msg.payload)\n// flow.get('emotion6_l_eyebrow_command', \"none\")\n// flow.set('emotion6_r_eyebrow_command', \"none\")\n// flow.set('emotion6_l_eye_command', \"none\")\n// flow.set('emotion6_r_eye_command', \"none\")\n// flow.set('emotion6_mouth_command', \"none\")\n\nreturn {topic: 'face2_currentEmotion', payload: payload};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2610,
        "y": 1780,
        "wires": [
            [
                "4df72777.a67ae"
            ]
        ]
    },
    {
        "id": "42ba73b4.48d92c",
        "type": "ui_ui_control",
        "z": "52bac4d7.a2850c",
        "name": "",
        "events": "all",
        "x": 2440,
        "y": 1780,
        "wires": [
            [
                "eb2671fc.1b3088"
            ]
        ]
    },
    {
        "id": "3951d6f4.cb1a12",
        "type": "comment",
        "z": "52bac4d7.a2850c",
        "name": "Dynamic Menu for editing Emotions FAce 2",
        "info": "",
        "x": 2550,
        "y": 1740,
        "wires": []
    },
    {
        "id": "4df72777.a67ae",
        "type": "ui_dropdown",
        "z": "52bac4d7.a2850c",
        "name": "",
        "label": "Choose Emotion",
        "tooltip": "",
        "place": "Select option",
        "group": "7ed8a98b.48af38",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Emotion 1",
                "value": "face2_emotion1",
                "type": "str"
            },
            {
                "label": "Emotion 2",
                "value": "face2_emotion2",
                "type": "str"
            },
            {
                "label": "Emotion 3",
                "value": "face2_emotion3",
                "type": "str"
            },
            {
                "label": "Emotion 4",
                "value": "face2_emotion4",
                "type": "str"
            },
            {
                "label": "Emotion 5",
                "value": "face2_emotion5",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "face2_currentEmotion",
        "topicType": "str",
        "className": "",
        "x": 2810,
        "y": 1780,
        "wires": [
            [
                "2f7bc501.7f55c2",
                "bd1d8942.f514c8"
            ]
        ]
    },
    {
        "id": "2f7bc501.7f55c2",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "updateCommandValues",
        "func": "let topic = msg.topic;\nlet payload = msg.payload;\n\nlet currentEmotion = payload\nflow.set('face2_currentEmotion', currentEmotion)\nvar name = ''\n\n\nlet LEBCommand = flow.get('face2_' + currentEmotion + '_' + 'l_eyebrow_command')\nlet LEBCommandMSG = {topic: 'value', payload: LEBCommand}\n\nlet REBCommand = flow.get('face2_' + currentEmotion + '_' + 'r_eyebrow_command')\nlet REBCommandMSG = {topic: 'value', payload: REBCommand}\n\nlet LECommand = flow.get('face2_' + currentEmotion + '_' + 'l_eye_command')\nlet LECommandMSG = {topic: 'value', payload: LECommand}\n\nlet RECommand = flow.get('face2_' + currentEmotion + '_' + 'r_eye_command')\nlet RECommandMSG = {topic: 'value', payload: RECommand}\n\nlet mouthCommand = flow.get('face2_' + currentEmotion + '_' + 'mouth_command')\nlet mouthCommandMSG = {topic: 'value', payload: mouthCommand}\n\n\nreturn[LEBCommandMSG, REBCommandMSG, LECommandMSG, RECommandMSG, mouthCommandMSG];\n\n\n\n//flow.set('angry' + msg.topic, msg.payload)\n",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3110,
        "y": 1800,
        "wires": [
            [
                "8462efb9.6edf18"
            ],
            [
                "ad8a2fdb.1ccc48"
            ],
            [
                "b091c62.98dd238"
            ],
            [
                "c635d55.8a17928"
            ],
            [
                "62fb85d2.5f2f84"
            ]
        ],
        "outputLabels": [
            "use_l_eyebrow_command",
            "l_eyebrow_command",
            "use_r_eyebrow_command",
            "r_eyebrow_command",
            "use_l_eye_command"
        ]
    },
    {
        "id": "8462efb9.6edf18",
        "type": "ui_dropdown",
        "z": "52bac4d7.a2850c",
        "name": "Left Eyebrow Command",
        "label": "",
        "tooltip": "",
        "place": "Select command",
        "group": "7ed8a98b.48af38",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "None",
                "value": "none",
                "type": "str"
            },
            {
                "label": "Wiggle",
                "value": "wiggle",
                "type": "str"
            },
            {
                "label": "Slow Wiggle",
                "value": "slow_wiggle",
                "type": "str"
            },
            {
                "label": "Fast Wiggle",
                "value": "fast_wiggle",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "l_eyebrow_command",
        "topicType": "str",
        "className": "",
        "x": 3410,
        "y": 1740,
        "wires": [
            [
                "240f16f.f6ce16a"
            ]
        ]
    },
    {
        "id": "ad8a2fdb.1ccc48",
        "type": "ui_dropdown",
        "z": "52bac4d7.a2850c",
        "name": "Right Eyebrow Command",
        "label": "",
        "tooltip": "",
        "place": "Select command",
        "group": "7ed8a98b.48af38",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "None",
                "value": "none",
                "type": "str"
            },
            {
                "label": "Wiggle",
                "value": "wiggle",
                "type": "str"
            },
            {
                "label": "Slow Wiggle",
                "value": "slow_wiggle",
                "type": "str"
            },
            {
                "label": "Fast Wiggle",
                "value": "fast_wiggle",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "r_eyebrow_command",
        "topicType": "str",
        "className": "",
        "x": 3410,
        "y": 1780,
        "wires": [
            [
                "240f16f.f6ce16a"
            ]
        ]
    },
    {
        "id": "b091c62.98dd238",
        "type": "ui_dropdown",
        "z": "52bac4d7.a2850c",
        "name": "Left Eye Command",
        "label": "",
        "tooltip": "",
        "place": "Select command",
        "group": "7ed8a98b.48af38",
        "order": 16,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "None",
                "value": "none",
                "type": "str"
            },
            {
                "label": "Breathe",
                "value": "breathe",
                "type": "str"
            },
            {
                "label": "Pulse",
                "value": "pulse",
                "type": "str"
            },
            {
                "label": "Blink",
                "value": "blink",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "l_eye_command",
        "topicType": "str",
        "className": "",
        "x": 3390,
        "y": 1820,
        "wires": [
            [
                "240f16f.f6ce16a"
            ]
        ]
    },
    {
        "id": "f13d69be.709cd",
        "type": "ui_numeric",
        "z": "52bac4d7.a2850c",
        "name": "Left Eye Speed",
        "label": "Speed",
        "tooltip": "",
        "group": "7ed8a98b.48af38",
        "order": 17,
        "width": 0,
        "height": 0,
        "wrap": true,
        "passthru": true,
        "topic": "l_eye_speed",
        "topicType": "str",
        "format": "{{value}}",
        "min": "50",
        "max": "200",
        "step": "10",
        "className": "",
        "x": 3380,
        "y": 1860,
        "wires": [
            [
                "240f16f.f6ce16a"
            ]
        ]
    },
    {
        "id": "c635d55.8a17928",
        "type": "ui_dropdown",
        "z": "52bac4d7.a2850c",
        "name": "Right Eye Command",
        "label": "",
        "tooltip": "",
        "place": "Select command",
        "group": "7ed8a98b.48af38",
        "order": 22,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "None",
                "value": "none",
                "type": "str"
            },
            {
                "label": "Breathe",
                "value": "breathe",
                "type": "str"
            },
            {
                "label": "Pulse",
                "value": "pulse",
                "type": "str"
            },
            {
                "label": "Blink",
                "value": "blink",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "r_eye_command",
        "topicType": "str",
        "className": "",
        "x": 3400,
        "y": 1900,
        "wires": [
            [
                "240f16f.f6ce16a"
            ]
        ]
    },
    {
        "id": "736f0b36.9cc034",
        "type": "ui_numeric",
        "z": "52bac4d7.a2850c",
        "name": "Right Eye Speed",
        "label": "Speed",
        "tooltip": "",
        "group": "7ed8a98b.48af38",
        "order": 23,
        "width": 0,
        "height": 0,
        "wrap": true,
        "passthru": true,
        "topic": "r_eye_speed",
        "topicType": "str",
        "format": "{{value}}",
        "min": "50",
        "max": "200",
        "step": "10",
        "className": "",
        "x": 3390,
        "y": 1940,
        "wires": [
            [
                "240f16f.f6ce16a"
            ]
        ]
    },
    {
        "id": "62fb85d2.5f2f84",
        "type": "ui_dropdown",
        "z": "52bac4d7.a2850c",
        "name": "Mouth Command",
        "label": "",
        "tooltip": "",
        "place": "Select command",
        "group": "7ed8a98b.48af38",
        "order": 27,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "None",
                "value": "none",
                "type": "str"
            },
            {
                "label": "Wiggle",
                "value": "wiggle",
                "type": "str"
            },
            {
                "label": "Slow Wiggle",
                "value": "slow_wiggle",
                "type": "str"
            },
            {
                "label": "Fast Wiggle",
                "value": "fast_wiggle",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "mouth_command",
        "topicType": "str",
        "className": "",
        "x": 3390,
        "y": 2000,
        "wires": [
            [
                "240f16f.f6ce16a"
            ]
        ]
    },
    {
        "id": "240f16f.f6ce16a",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "",
        "func": "let topic = msg.topic;\nlet payload = msg.payload;\n\nlet currentEmotion = flow.get('face2_currentEmotion') || 'face2_emotion1'\n\nswitch (topic) {\n    case 'l_eyebrow_command':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n    case 'r_eyebrow_command':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n    case 'l_eye_command':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n    case 'r_eye_command':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n    case 'mouth_command':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n    case 'l_eye_speed':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n    case 'r_eye_speed':\n        flow.set(currentEmotion + '_' + topic, payload)\n        break\n}\n// let p = flow.get(currentEmotion + '_' + topic + '_' + payload.toString())\n// return {topic: currentEmotion, payload: p}\n\n//flow.set('angry' + msg.topic, msg.payload)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3680,
        "y": 1920,
        "wires": [
            [
                "134eea44.ec0426"
            ]
        ]
    },
    {
        "id": "134eea44.ec0426",
        "type": "debug",
        "z": "52bac4d7.a2850c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3460,
        "y": 1400,
        "wires": []
    },
    {
        "id": "c1f6494f.a0901",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "Vote Setup UI Handler",
        "func": "\nswitch (msg.topic) {\n    case 'face2_reaction1':\n        node.warn(['setting emotion for', msg.topic]);\n        node.warn(['emotion chosen is', msg.payload]);\n        flow.set(msg.topic, msg.payload);\n        break\n    case 'face2_reaction2':\n        node.warn(['setting emotion for', msg.topic]);\n        node.warn(['emotion chosen is', msg.payload]);\n        flow.set(msg.topic, msg.payload);\n        break\n    case 'face2_reaction3':\n        node.warn(['setting emotion for', msg.topic]);\n        node.warn(['emotion chosen is', msg.payload]);\n        flow.set(msg.topic, msg.payload);\n        break\n    case 'face2_reaction4':\n        node.warn(['setting emotion for', msg.topic]);\n        node.warn(['emotion chosen is', msg.payload]);\n        flow.set(msg.topic, msg.payload);\n        break\n    case 'face2_reaction5':\n        node.warn(['setting emotion for', msg.topic]);\n        node.warn(['emotion chosen is', msg.payload]);\n        flow.set(msg.topic, msg.payload);\n        break\n    case 'face2_poll_threshold':\n        flow.set('poll_threshold', msg.payload);\n        break\n    case 'face2_reaction2_threshold':\n        flow.set(msg.topic, msg.payload);\n        break\n    case 'face2_question':\n        flow.set(msg.topic, msg.payload);\n        break\n    case 'face2_displayOnClose':\n        flow.set(msg.topic, msg.payload)\n        break\n    case 'face2_votingIsLive':\n        flow.set(msg.topic, msg.payload);\n        if (msg.payload === false) {\n            let autoResult = flow.get('face2_displayOnClose')\n            if (autoResult === true) {\n                let ans1 = flow.get('face2_answer1_count');\n                let ans2 = flow.get('face2_answer2_count');\n                let ans3 = flow.get('face2_answer3_count');\n                let ans4 = flow.get('face2_answer4_count');\n                let ans5 = flow.get('face2_answer5_count');\n                \n                let answers = [ans1, ans2, ans3, ans4, ans5];\n\n                var max = answers[0];\n                var maxIndex = 0;\n\n                for (var i = 1; i < answers.length; i++) {\n                    if (answers[i] > max) {\n                        maxIndex = i;\n                        max = answers[i];\n                    }\n                }\n                switch (maxIndex) {\n                    case 0:\n                        let react1 = flow.get('face2_reaction1')\n                        return { topic: 'face2', payload: react1 }\n                    case 1:\n                        let react2 = flow.get('face2_reaction2')\n                        return { topic: 'face2', payload: react2 }\n                    case 2:\n                        let react3 = flow.get('face2_reaction3')\n                        return { topic: 'face2', payload: react3 }\n                    case 3:\n                        let react4 = flow.get('face2_reaction4')\n                        return { topic: 'face2', payload: react4 }\n                    case 4:\n                        let react5 = flow.get('face2_reaction5')\n                        return { topic: 'face2', payload: react5 }\n                    default:\n                        return\n                }\n            }\n        }\n        break\n    case 'face2_resetPoll':\n        flow.set('face2_answer1_count', 0);\n        flow.set('face2_answer2_count', 0);\n        flow.set('face2_answer3_count', 0);\n        flow.set('face2_answer4_count', 0);\n        flow.set('face2_answer5_count', 0);\n        return {topic: msg.topic, payload: flow.get('answer2_count')} \n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4320,
        "y": 1900,
        "wires": [
            [
                "b068871a.f1e758"
            ]
        ]
    },
    {
        "id": "b068871a.f1e758",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "Calculate Guage Value",
        "func": "let ans1 = flow.get('face2_answer1_count') || 0;\nlet ans2 = flow.get('face2_answer2_count') || 0;\nlet ans3 = flow.get('face2_answer3_count') || 0;\nlet ans4 = flow.get('face2_answer4_count') || 0;\nlet ans5 = flow.get('face2_answer5_count') || 0;\n\nlet answers = [ans1, ans2, ans3, ans4, ans5];\n\nvar max = answers[0];\nvar maxIndex = 0;\n\nfor (var i = 1; i < answers.length; i++) {\n    if (answers[i] > max) {\n        maxIndex = i;\n        max = answers[i];\n    }\n}\nlet total = ans1 + ans2 + ans3 + ans4 + ans5;\nlet result1 = Math.round((answers[0] / total) * 100)\nlet result2 = Math.round((answers[1] / total) * 100)\nlet result3 = Math.round((answers[2] / total) * 100)\nlet result4 = Math.round((answers[3] / total) * 100)\nlet result5 = Math.round((answers[4] / total) * 100)\n\nreturn [{ topic: 'Answer 1', payload: result1 }, { topic: 'Answer 2', payload: result2 }, { topic: 'Answer 3', payload: result3 }, { topic: 'Answer 4', payload: result4 }, { topic: 'Answer 5', payload: result5 }]\n// return { topic: 'result', payload: total}",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4400,
        "y": 2060,
        "wires": [
            [
                "d8eae57a.e1a5e8"
            ],
            [
                "d59de4fddbafdaba"
            ],
            [
                "787c7c76d924c9ee"
            ],
            [
                "c006aaa3c7a46d10"
            ],
            [
                "608dd9f0a11e71fc"
            ]
        ]
    },
    {
        "id": "16f55a3a.8b061e",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "Calculate Poll Emotion ",
        "func": "let ans1 = flow.get('face2_answer1_count');\nlet ans2 = flow.get('face2_answer2_count');\nlet ans3 = flow.get('face2_answer1_count');\nlet ans4 = flow.get('face2_answer2_count');\nlet ans5 = flow.get('face2_answer1_count');\nlet answers = [ans1, ans2, ans3, ans4, ans5];\nlet threshold = flow.get('face2_poll_threshold') || 50;\n\nvar max = answers[0];\nvar maxIndex = 0;\n\nfor (var i = 1; i < answers.length; i++) {\n    if (answers[i] > max) {\n        maxIndex = i;\n        max = answers[i];\n    }\n}\n// let result = Math.round((ans1 / (ans1 + ans2) * 100));\nswitch (maxIndex) {\n    case 0:\n        let react1 = flow.get('face2_reaction1')\n        return { topic: 'face2', payload: react1 }\n        break;\n    case 1:\n        let react2 = flow.get('face2_reaction2')\n        return { topic: 'face2', payload: react2 }\n        break;\n    case 2:\n        let react3 = flow.get('face2_reaction3')\n        return { topic: 'face2', payload: react3 }\n        break;\n    case 3:\n        let react4 = flow.get('face2_reaction4')\n        return { topic: 'face2', payload: react4 }\n        break;\n    case 4:\n        let react5 = flow.get('face2_reaction5')\n        return { topic: 'face2', payload: react5 }\n        break;\n    default:\n        break   \n}\nreturn \n// if (result >= threshold) {\n//     let react1 = flow.get('face2_reaction1')\n//     node.warn([\"face2_reaction 1\", react1])\n//     return {topic: 'face2', payload: react1}\n// }\n// else {\n//     let react2 = flow.get('face2_reaction2')\n//     node.warn([\"face2_reaction 2\", react2])\n//     return {topic: 'face2', payload: react2}\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4680,
        "y": 1940,
        "wires": [
            [
                "a0606a67.24d738",
                "e6174819.4c8868"
            ]
        ]
    },
    {
        "id": "d8eae57a.e1a5e8",
        "type": "ui_gauge",
        "z": "52bac4d7.a2850c",
        "name": "Face 2 Results Percentage",
        "group": "c0df183a28956a0f",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "{{msg.topic}}",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#c0c0c0",
            "#aaaaaa",
            "#444444"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 4840,
        "y": 1980,
        "wires": []
    },
    {
        "id": "a0606a67.24d738",
        "type": "ui_text",
        "z": "52bac4d7.a2850c",
        "group": "3acdae75.d6d92a",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "result",
        "label": "Result:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 4870,
        "y": 1700,
        "wires": []
    },
    {
        "id": "1b6dded15d53cb04",
        "type": "mqtt out",
        "z": "52bac4d7.a2850c",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d1556403.60a488",
        "x": 1870,
        "y": 960,
        "wires": []
    },
    {
        "id": "bd5c6c23.20697",
        "type": "uibuilder",
        "z": "52bac4d7.a2850c",
        "name": "VizBlock Controller",
        "topic": "",
        "url": "vizblock-controller",
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "vue",
        "extTemplate": "",
        "showfolder": false,
        "reload": false,
        "sourceFolder": "src",
        "deployedVersion": "5.1.1",
        "x": 690,
        "y": 620,
        "wires": [
            [
                "872c61e3.98945",
                "1b6dded15d53cb04",
                "3cfcb614.581a2a"
            ],
            [
                "31345eb1.ef8a72"
            ]
        ]
    },
    {
        "id": "8b28d4d9.70b528",
        "type": "uibuilder",
        "z": "52bac4d7.a2850c",
        "name": "admin app",
        "topic": "",
        "url": "admin",
        "fwdInMessages": false,
        "allowScripts": true,
        "allowStyles": true,
        "copyIndex": true,
        "templateFolder": "vue",
        "extTemplate": "",
        "showfolder": false,
        "reload": false,
        "sourceFolder": "src",
        "deployedVersion": "5.1.1",
        "x": 570,
        "y": 440,
        "wires": [
            [
                "c1f915d0.a25d68",
                "e1cb618a.ce3ed"
            ],
            [
                "31345eb1.ef8a72"
            ]
        ]
    },
    {
        "id": "4933f768.9f3008",
        "type": "uibuilder",
        "z": "52bac4d7.a2850c",
        "name": "Polling",
        "topic": "",
        "url": "polling",
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": true,
        "copyIndex": true,
        "templateFolder": "vue",
        "extTemplate": "",
        "showfolder": false,
        "reload": false,
        "sourceFolder": "src",
        "deployedVersion": "5.1.1",
        "x": 3490,
        "y": 620,
        "wires": [
            [
                "57c71e36.9fe28",
                "44920056.56b72"
            ],
            []
        ]
    },
    {
        "id": "05823a48c283c997",
        "type": "ui_text_input",
        "z": "52bac4d7.a2850c",
        "name": "",
        "label": "Command",
        "tooltip": "Command",
        "group": "e8f4b2380aaf9065",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "face1_command",
        "sendOnBlur": false,
        "className": "",
        "topicType": "str",
        "x": 1450,
        "y": 1080,
        "wires": [
            [
                "6f2fe4195acf69a8"
            ]
        ]
    },
    {
        "id": "a6d97c4638d3982b",
        "type": "ui_dropdown",
        "z": "52bac4d7.a2850c",
        "name": "",
        "label": "VizBlock",
        "tooltip": "",
        "place": "Select option",
        "group": "e8f4b2380aaf9065",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Bob",
                "value": "bob",
                "type": "str"
            },
            {
                "label": "Joy",
                "value": "joy",
                "type": "str"
            },
            {
                "label": "Eve",
                "value": "eve",
                "type": "str"
            },
            {
                "label": "Fin",
                "value": "fin",
                "type": "str"
            },
            {
                "label": "Caz",
                "value": "caz",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "face1_block",
        "topicType": "str",
        "className": "",
        "x": 1440,
        "y": 1040,
        "wires": [
            [
                "6f2fe4195acf69a8"
            ]
        ]
    },
    {
        "id": "6f2fe4195acf69a8",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "sendCustomCommand",
        "func": "var payload=msg.payload;\n// node.warn('Custom command ')\n// node.warn(msg.payload)\nvar output_msg = [];\n\nlet blocks = ['bob', 'joy', 'eve', 'fin', 'caz', 'tim', 'jim', 'ada', 'ben', 'lou']\n\nswitch (msg.topic) {\n    case 'face1_block':\n        flow.set('customBlock1Name', msg.payload)\n        break;\n    case 'face1_command':\n        flow.set(\"customBlock1Command\", msg.payload)\n        break;\n    case 'face1_button':\n        let block1 = flow.get('customBlock1Name')\n        let command1 = flow.get('customBlock1Command')\n        output_msg.push({ topic: block1, payload: command1 });\n        return [output_msg];\n    case 'face2_block':\n        flow.set('customBlock2Name', msg.payload)\n        break;\n    case 'face2_command':\n        flow.set(\"customBlock2Command\", msg.payload)\n        break;\n    case 'face2_button':\n        let block2 = flow.get('customBlock2Name')\n        let command2 = flow.get('customBlock2Command')\n        output_msg.push({ topic: block2, payload: command2 });\n        return [output_msg];\n    default:\n        break;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1040,
        "wires": [
            [
                "1b6dded15d53cb04"
            ]
        ]
    },
    {
        "id": "8b4aca39382c343e",
        "type": "ui_text_input",
        "z": "52bac4d7.a2850c",
        "name": "",
        "label": "Command",
        "tooltip": "Command",
        "group": "925e7756a4d8ad30",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "face2_command",
        "sendOnBlur": false,
        "className": "",
        "topicType": "str",
        "x": 1450,
        "y": 1220,
        "wires": [
            [
                "6f2fe4195acf69a8"
            ]
        ]
    },
    {
        "id": "dd1e9bb4f8b3558a",
        "type": "ui_dropdown",
        "z": "52bac4d7.a2850c",
        "name": "",
        "label": "VizBlock",
        "tooltip": "",
        "place": "Select option",
        "group": "925e7756a4d8ad30",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Tim",
                "value": "tim",
                "type": "str"
            },
            {
                "label": "Jim",
                "value": "jim",
                "type": "str"
            },
            {
                "label": "Ada",
                "value": "ada",
                "type": "str"
            },
            {
                "label": "Ben",
                "value": "ben",
                "type": "str"
            },
            {
                "label": "Lou",
                "value": "lou",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "face2_block",
        "topicType": "str",
        "className": "",
        "x": 1440,
        "y": 1180,
        "wires": [
            [
                "6f2fe4195acf69a8"
            ]
        ]
    },
    {
        "id": "2f6b06c3ef405fc1",
        "type": "ui_button",
        "z": "52bac4d7.a2850c",
        "name": "",
        "group": "925e7756a4d8ad30",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Send",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "go",
        "payloadType": "str",
        "topic": "face2_button",
        "topicType": "str",
        "x": 1430,
        "y": 1260,
        "wires": [
            [
                "6f2fe4195acf69a8"
            ]
        ]
    },
    {
        "id": "ba40315afec2606a",
        "type": "ui_button",
        "z": "52bac4d7.a2850c",
        "name": "",
        "group": "e8f4b2380aaf9065",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Send",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "go",
        "payloadType": "str",
        "topic": "face1_button",
        "topicType": "str",
        "x": 1430,
        "y": 1120,
        "wires": [
            [
                "6f2fe4195acf69a8"
            ]
        ]
    },
    {
        "id": "57e64a5eb5318ee1",
        "type": "ui_chart",
        "z": "52bac4d7.a2850c",
        "d": true,
        "name": "",
        "group": "3acdae75.d6d92a",
        "order": 13,
        "width": 0,
        "height": 0,
        "label": "Results",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 4560,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "d18db7f3826a6cfe",
        "type": "function",
        "z": "52bac4d7.a2850c",
        "name": "Calculate Chart Value",
        "func": "let ans1 = flow.get('face2_answer1_count') || 0;\nlet ans2 = flow.get('face2_answer2_count') || 0;\nlet ans3 = flow.get('face2_answer3_count') || 0;\nlet ans4 = flow.get('face2_answer4_count') || 0;\nlet ans5 = flow.get('face2_answer5_count') || 0;\nlet answers = [ans1, ans2, ans3, ans4, ans5]\nfor (let index = 0; index < answers.length; index++) {\n    return {topic: index, payload: answers[index]}   \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4300,
        "y": 2160,
        "wires": [
            [
                "57e64a5eb5318ee1"
            ]
        ]
    },
    {
        "id": "7b0a1822ded6a631",
        "type": "subflow:2843e038da0bd592",
        "z": "52bac4d7.a2850c",
        "name": "",
        "x": 3930,
        "y": 2060,
        "wires": [
            [
                "47f2b36d.fb58c4"
            ],
            [
                "84e5a4c2.baba28",
                "8f106d41.e3f38"
            ],
            [
                "c1f6494f.a0901"
            ],
            [
                "16f55a3a.8b061e",
                "b068871a.f1e758",
                "d18db7f3826a6cfe"
            ]
        ]
    },
    {
        "id": "20468798d48318e7",
        "type": "ui_gauge",
        "z": "52bac4d7.a2850c",
        "name": "Face 1 Results Ans2",
        "group": "a4f664876522e645",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "{{msg.topic}}",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#c0c0c0",
            "#aaaaaa",
            "#444444"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 4360,
        "y": 1000,
        "wires": []
    },
    {
        "id": "ce926b547f729098",
        "type": "ui_gauge",
        "z": "52bac4d7.a2850c",
        "name": "Face 1 Results Ans3",
        "group": "a4f664876522e645",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "{{msg.topic}}",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#c0c0c0",
            "#aaaaaa",
            "#444444"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 4360,
        "y": 1040,
        "wires": []
    },
    {
        "id": "c8caaf7b8d8b95fe",
        "type": "ui_gauge",
        "z": "52bac4d7.a2850c",
        "name": "Face 1 Results Ans4",
        "group": "a4f664876522e645",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "{{msg.topic}}",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#c0c0c0",
            "#aaaaaa",
            "#444444"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 4360,
        "y": 1080,
        "wires": []
    },
    {
        "id": "d94dceb39616ad8c",
        "type": "ui_gauge",
        "z": "52bac4d7.a2850c",
        "name": "Face 1 Results Ans5",
        "group": "a4f664876522e645",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "{{msg.topic}}",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#c0c0c0",
            "#aaaaaa",
            "#444444"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 4360,
        "y": 1120,
        "wires": []
    },
    {
        "id": "d59de4fddbafdaba",
        "type": "ui_gauge",
        "z": "52bac4d7.a2850c",
        "name": "Face 2 Results Percentage",
        "group": "c0df183a28956a0f",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "{{msg.topic}}",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#c0c0c0",
            "#aaaaaa",
            "#444444"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 4860,
        "y": 2020,
        "wires": []
    },
    {
        "id": "787c7c76d924c9ee",
        "type": "ui_gauge",
        "z": "52bac4d7.a2850c",
        "name": "Face 2 Results Percentage",
        "group": "c0df183a28956a0f",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "{{msg.topic}}",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#c0c0c0",
            "#aaaaaa",
            "#444444"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 4880,
        "y": 2060,
        "wires": []
    },
    {
        "id": "c006aaa3c7a46d10",
        "type": "ui_gauge",
        "z": "52bac4d7.a2850c",
        "name": "Face 2 Results Percentage",
        "group": "c0df183a28956a0f",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "{{msg.topic}}",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#c0c0c0",
            "#aaaaaa",
            "#444444"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 4880,
        "y": 2100,
        "wires": []
    },
    {
        "id": "608dd9f0a11e71fc",
        "type": "ui_gauge",
        "z": "52bac4d7.a2850c",
        "name": "Face 2 Results Percentage",
        "group": "c0df183a28956a0f",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "{{msg.topic}}",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#c0c0c0",
            "#aaaaaa",
            "#444444"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 4880,
        "y": 2140,
        "wires": []
    },
    {
        "id": "40d146812fb847ee",
        "type": "ui_numeric",
        "z": "52bac4d7.a2850c",
        "name": "Left Eyebrow Angle",
        "label": "Left Angle",
        "tooltip": "",
        "group": "e7ea26e6.3e9db",
        "order": 7,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "l_eyebrow_angle",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1",
        "max": "180",
        "step": 1,
        "className": "",
        "x": 3080,
        "y": 300,
        "wires": [
            [
                "cb716f51.65a29"
            ]
        ]
    },
    {
        "id": "deaa514f7948a203",
        "type": "ui_numeric",
        "z": "52bac4d7.a2850c",
        "name": "Right Eyebrow Angle",
        "label": "Right Angle",
        "tooltip": "",
        "group": "e7ea26e6.3e9db",
        "order": 10,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "r_eyebrow_angle",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1",
        "max": "180",
        "step": 1,
        "className": "",
        "x": 3080,
        "y": 400,
        "wires": [
            [
                "cb716f51.65a29"
            ]
        ]
    },
    {
        "id": "2cce300e5f2b2f64",
        "type": "ui_numeric",
        "z": "52bac4d7.a2850c",
        "name": "Left Eye Count",
        "label": "LED Count",
        "tooltip": "",
        "group": "e7ea26e6.3e9db",
        "order": 16,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "l_eye_count",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1",
        "max": "180",
        "step": 1,
        "className": "",
        "x": 3040,
        "y": 560,
        "wires": [
            [
                "cb716f51.65a29"
            ]
        ]
    },
    {
        "id": "c6eb54365cdbd299",
        "type": "ui_numeric",
        "z": "52bac4d7.a2850c",
        "name": "Right Eye Count",
        "label": "LED Count",
        "tooltip": "",
        "group": "e7ea26e6.3e9db",
        "order": 23,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "r_eye_count",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1",
        "max": "180",
        "step": 1,
        "className": "",
        "x": 2990,
        "y": 720,
        "wires": [
            [
                "cb716f51.65a29"
            ]
        ]
    },
    {
        "id": "47ab21739dbee93f",
        "type": "ui_numeric",
        "z": "52bac4d7.a2850c",
        "name": "Mouth Angle",
        "label": "Angle",
        "tooltip": "",
        "group": "e7ea26e6.3e9db",
        "order": 28,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "mouth_angle",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1",
        "max": "180",
        "step": 1,
        "className": "",
        "x": 2900,
        "y": 860,
        "wires": [
            [
                "cb716f51.65a29"
            ]
        ]
    },
    {
        "id": "5595cd853ce7b17a",
        "type": "ui_numeric",
        "z": "52bac4d7.a2850c",
        "name": "Left Eyebrow Angle",
        "label": "Left Angle",
        "tooltip": "",
        "group": "7ed8a98b.48af38",
        "order": 7,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "l_eyebrow_angle",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1",
        "max": "180",
        "step": 1,
        "className": "",
        "x": 2800,
        "y": 1140,
        "wires": [
            [
                "7d604614.6ad2d8"
            ]
        ]
    },
    {
        "id": "7ea0bc1a0b943c89",
        "type": "ui_numeric",
        "z": "52bac4d7.a2850c",
        "name": "Right Eyebrow Angle",
        "label": "Right Angle",
        "tooltip": "",
        "group": "7ed8a98b.48af38",
        "order": 10,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "r_eyebrow_angle",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1",
        "max": "180",
        "step": 1,
        "className": "",
        "x": 2800,
        "y": 1220,
        "wires": [
            [
                "7d604614.6ad2d8"
            ]
        ]
    },
    {
        "id": "6717c7efdc2aba98",
        "type": "ui_numeric",
        "z": "52bac4d7.a2850c",
        "name": "Left Eye Count",
        "label": "LED Count",
        "tooltip": "",
        "group": "7ed8a98b.48af38",
        "order": 15,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "l_eye_count",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1",
        "max": "180",
        "step": 1,
        "className": "",
        "x": 2780,
        "y": 1380,
        "wires": [
            [
                "7d604614.6ad2d8"
            ]
        ]
    },
    {
        "id": "f7a849fae6c89b5f",
        "type": "ui_numeric",
        "z": "52bac4d7.a2850c",
        "name": "Right Eye Count",
        "label": "LED Count",
        "tooltip": "",
        "group": "7ed8a98b.48af38",
        "order": 21,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "r_eye_count",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1",
        "max": "180",
        "step": 1,
        "className": "",
        "x": 2790,
        "y": 1540,
        "wires": [
            [
                "7d604614.6ad2d8"
            ]
        ]
    },
    {
        "id": "d9f450264f7769a6",
        "type": "ui_numeric",
        "z": "52bac4d7.a2850c",
        "name": "Mouth Angle",
        "label": "Angle",
        "tooltip": "",
        "group": "7ed8a98b.48af38",
        "order": 26,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "mouth_angle",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1",
        "max": "180",
        "step": 1,
        "className": "",
        "x": 2800,
        "y": 1680,
        "wires": [
            [
                "7d604614.6ad2d8"
            ]
        ]
    },
    {
        "id": "7a44eaa8.b0adc4",
        "type": "exec",
        "z": "a7ea88cc.f7f7b8",
        "command": "sudo shutdown -h now",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Shutdown the RPi",
        "x": 750,
        "y": 380,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "b916f2c9.b8e5d",
        "type": "inject",
        "z": "a7ea88cc.f7f7b8",
        "name": "Shutdown this Pi",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 160,
        "y": 220,
        "wires": [
            [
                "5273f8c0.792408",
                "caaf02c2.6a49b"
            ]
        ]
    },
    {
        "id": "4467d90f.26d9f8",
        "type": "inject",
        "z": "a7ea88cc.f7f7b8",
        "name": "Confirm shutdown",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 170,
        "y": 380,
        "wires": [
            [
                "f9c6d3c4.8fd4b"
            ]
        ]
    },
    {
        "id": "49f1eb69.b78a14",
        "type": "function",
        "z": "a7ea88cc.f7f7b8",
        "name": "",
        "func": "if (msg.payload == 1)\n    {\n        flow.set(\"shutdown\", \"yes\")\n        node.status({text:\"Shutdown = yes\"});\n    }\nelse if (msg.payload === 0)\n    {\n        flow.set(\"shutdown\", \"no\")\n        node.status({text:\"Shutdown = no\"});\n    }",
        "outputs": 0,
        "noerr": 0,
        "x": 570,
        "y": 220,
        "wires": []
    },
    {
        "id": "5273f8c0.792408",
        "type": "trigger",
        "z": "a7ea88cc.f7f7b8",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "num",
        "op2type": "num",
        "duration": "5",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 360,
        "y": 220,
        "wires": [
            [
                "49f1eb69.b78a14"
            ]
        ]
    },
    {
        "id": "f9c6d3c4.8fd4b",
        "type": "function",
        "z": "a7ea88cc.f7f7b8",
        "name": "",
        "func": "var shutdown = flow.get(\"shutdown\") || \"no\";\n\nif ( (msg.payload == 1) && (shutdown == \"yes\") )\n    {\n        node.status({text:\"Shutting down RPi\"});\n        return msg;\n    }\nelse\n    {\n    node.status({text:\"Nothing doing\"});\n        return null;\n    }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 380,
        "wires": [
            [
                "9a04b8.26ecab48",
                "7a44eaa8.b0adc4"
            ]
        ]
    },
    {
        "id": "caaf02c2.6a49b",
        "type": "function",
        "z": "a7ea88cc.f7f7b8",
        "name": "Inverter",
        "func": "if (msg.payload == 1)\n{\n    msg.payload = 0;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 300,
        "wires": [
            [
                "f9c6d3c4.8fd4b"
            ]
        ]
    },
    {
        "id": "8c5bf97e.d807f8",
        "type": "comment",
        "z": "a7ea88cc.f7f7b8",
        "name": "Routine to shutdown this Pi",
        "info": "",
        "x": 180,
        "y": 100,
        "wires": []
    },
    {
        "id": "d7521323.76457",
        "type": "comment",
        "z": "a7ea88cc.f7f7b8",
        "name": "Press the Confirm button within 5 seconds if you do really want to shutdown",
        "info": "",
        "x": 330,
        "y": 140,
        "wires": []
    },
    {
        "id": "9a04b8.26ecab48",
        "type": "debug",
        "z": "a7ea88cc.f7f7b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 730,
        "y": 300,
        "wires": []
    },
    {
        "id": "df2eee0f.97cc2",
        "type": "mqtt out",
        "z": "3c645eec.a8fd02",
        "name": "",
        "topic": "da58ff",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d1556403.60a488",
        "x": 610,
        "y": 340,
        "wires": []
    },
    {
        "id": "3f3898ab.f871d8",
        "type": "inject",
        "z": "3c645eec.a8fd02",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "goto 80",
        "payloadType": "str",
        "x": 330,
        "y": 180,
        "wires": [
            [
                "df2eee0f.97cc2"
            ]
        ]
    },
    {
        "id": "badbbb3f.ee75a8",
        "type": "comment",
        "z": "3c645eec.a8fd02",
        "name": "Double-click on this inject node and edit the command you'd like to send to the vizblock",
        "info": "Double-click on this inject node and edit the command you'd like to send to the vizblock",
        "x": 550,
        "y": 140,
        "wires": []
    },
    {
        "id": "6a1d0448.2afb8c",
        "type": "comment",
        "z": "3c645eec.a8fd02",
        "name": "Double-click on this MQTT send node and change the topic to the name of the VizBlock you want to control",
        "info": "",
        "x": 930,
        "y": 300,
        "wires": []
    },
    {
        "id": "1e11ec23.db2804",
        "type": "comment",
        "z": "3c645eec.a8fd02",
        "name": "CLICK ME and read instructions in the right-hand panel",
        "info": "# Instructions\n\nThis flow lets you test the basic functionality of this remote Node-Red and MQTT server. \n\nBefore starting, check that the purple MQTT send node says `connected` beneath it. If not, double click the node to open its settings, then click the pencil icon next to the server input, then go to the security tab and make sure the username and password is entered for the MQTT broker.\n\n## Setting up your VizBlock\n\nIn order for a the vizblock to work with this remote server, you will need configure the VizBlock (using Arduino code) so that it:\n- a) connects to a WiFi network with internet access.\n- b) connects to the remote MQTT server.\n\nYou can do this by editing the block configuration in the following lines:\n\n```\nVizBlock node(\n  \"null\",       // Our ID\n  \"<wifi_net>\",  //Wifi Access Point\n  \"<wifi_password>\",  //WiFi Password\n  \"vizblocks-server.creativeinformatics.org\",//IP address of Node RED server\n   8883,         //Port for Node RED server\n   \"<mqtt_user>\",  //MQTT username\n   \"<mqtt_password>\",    //MQTT password\n   \"<F7:AD:10:85:97:1E:F8:68:08:17:A3:DC:68:F9:C3:42:DE:C9:A3:F8>\" // SHA1 fingerprint (for mqtt server)\n  );\n```\n\nReplace all of the settings in `<>` with your values (or those provided to you). To get the SHA1 fingerprint you can use the following command (on Mac/Linux):\n\n```bash\nopenssl s_client -connect vizblocks-server.creativeinformatics.org:8883 < /dev/null 2>/dev/null | openssl x509 -fingerprint -noout -in /dev/stdin\n```\n\n## Running a test\nDouble click on the blue input node to open its setting tab, then enter the command you'd like to send to the VizBlock in the `msg.payload` field.\n\nDouble click on the purple MQTT node and enter the name of the VizBlock you'd like to control in the Topic field.\n\nClick **Deploy** in the top right corner, then click the button to the right of the input node to send commands to your VizBlock.",
        "x": 440,
        "y": 60,
        "wires": []
    }
]